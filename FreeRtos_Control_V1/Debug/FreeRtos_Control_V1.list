
FreeRtos_Control_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005764  08005764  00015764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005844  08005844  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800584c  0800584c  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800584c  0800584c  0001584c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005850  08005850  00015850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08005854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004164  200000f4  08005948  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004258  08005948  00024258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b0f  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b3b  00000000  00000000  00030c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00033770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00034518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ac8  00000000  00000000  00035188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f914  00000000  00000000  0004dc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a276  00000000  00000000  0005d564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f77da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d4  00000000  00000000  000f782c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f4 	.word	0x200000f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800574c 	.word	0x0800574c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f8 	.word	0x200000f8
 80001dc:	0800574c 	.word	0x0800574c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000110 	.word	0x20000110
 8000514:	200001c4 	.word	0x200001c4

08000518 <main>:




int main(void)
{
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	b08e      	sub	sp, #56	; 0x38
 800051c:	af00      	add	r7, sp, #0

  HAL_Init();
 800051e:	f000 ff47 	bl	80013b0 <HAL_Init>
  SystemClock_Config();
 8000522:	f000 f869 	bl	80005f8 <SystemClock_Config>
  MX_GPIO_Init();
 8000526:	f000 fa35 	bl	8000994 <MX_GPIO_Init>
  MX_DMA_Init();
 800052a:	f000 fa13 	bl	8000954 <MX_DMA_Init>
  MX_ADC1_Init();
 800052e:	f000 f8c1 	bl	80006b4 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000532:	f000 f921 	bl	8000778 <MX_SPI2_Init>

  HAL_ADC_Start_DMA(&hadc1, adc_buf, 2);
 8000536:	2202      	movs	r2, #2
 8000538:	4925      	ldr	r1, [pc, #148]	; (80005d0 <main+0xb8>)
 800053a:	4826      	ldr	r0, [pc, #152]	; (80005d4 <main+0xbc>)
 800053c:	f001 f9bc 	bl	80018b8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc1);
 8000540:	4824      	ldr	r0, [pc, #144]	; (80005d4 <main+0xbc>)
 8000542:	f000 ffeb 	bl	800151c <HAL_ADC_Start_IT>
  /* USER CODE BEGIN 2 */
	// MODULE SETTINGS ----------------------------------------------
	 nrfTx.CE_port = GPIOB;
 8000546:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <main+0xc0>)
 8000548:	4a24      	ldr	r2, [pc, #144]	; (80005dc <main+0xc4>)
 800054a:	609a      	str	r2, [r3, #8]
	 nrfTx.CE_pin = GPIO_PIN_7;
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <main+0xc0>)
 800054e:	2280      	movs	r2, #128	; 0x80
 8000550:	819a      	strh	r2, [r3, #12]
	 nrfTx.CSN_port = GPIOB;
 8000552:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <main+0xc0>)
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <main+0xc4>)
 8000556:	601a      	str	r2, [r3, #0]
	 nrfTx.CSN_pin =GPIO_PIN_12;
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <main+0xc0>)
 800055a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800055e:	809a      	strh	r2, [r3, #4]
	 nrfTx.IRQ_port = GPIOB;
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <main+0xc0>)
 8000562:	4a1e      	ldr	r2, [pc, #120]	; (80005dc <main+0xc4>)
 8000564:	611a      	str	r2, [r3, #16]
	 nrfTx.IRQ_pin = GPIO_PIN_0;
 8000566:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <main+0xc0>)
 8000568:	2201      	movs	r2, #1
 800056a:	829a      	strh	r2, [r3, #20]
	 nrfTx.hSPIx = &hspi2;
 800056c:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <main+0xc0>)
 800056e:	4a1c      	ldr	r2, [pc, #112]	; (80005e0 <main+0xc8>)
 8000570:	619a      	str	r2, [r3, #24]

	 nrf24_init(&nrfTx);
 8000572:	4819      	ldr	r0, [pc, #100]	; (80005d8 <main+0xc0>)
 8000574:	f000 fa41 	bl	80009fa <nrf24_init>
	 nrf24_setTxAddr(&nrfTx, txAddr);
 8000578:	491a      	ldr	r1, [pc, #104]	; (80005e4 <main+0xcc>)
 800057a:	4817      	ldr	r0, [pc, #92]	; (80005d8 <main+0xc0>)
 800057c:	f000 fb82 	bl	8000c84 <nrf24_setTxAddr>

	  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <main+0xd0>)
 8000582:	f107 041c 	add.w	r4, r7, #28
 8000586:	461d      	mov	r5, r3
 8000588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000590:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000594:	f107 031c 	add.w	r3, r7, #28
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 fd6d 	bl	800407a <osThreadCreate>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a12      	ldr	r2, [pc, #72]	; (80005ec <main+0xd4>)
 80005a4:	6013      	str	r3, [r2, #0]



	  osThreadDef(myTask02, StartTask02, osPriorityHigh, 0, 128);
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <main+0xd8>)
 80005a8:	463c      	mov	r4, r7
 80005aa:	461d      	mov	r5, r3
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80005b8:	463b      	mov	r3, r7
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fd5c 	bl	800407a <osThreadCreate>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <main+0xdc>)
 80005c6:	6013      	str	r3, [r2, #0]




		  /* Start scheduler */
		  osKernelStart();
 80005c8:	f003 fd50 	bl	800406c <osKernelStart>



	while (1) {
 80005cc:	e7fe      	b.n	80005cc <main+0xb4>
 80005ce:	bf00      	nop
 80005d0:	20000474 	.word	0x20000474
 80005d4:	200003cc 	.word	0x200003cc
 80005d8:	200004d8 	.word	0x200004d8
 80005dc:	40020400 	.word	0x40020400
 80005e0:	20000480 	.word	0x20000480
 80005e4:	20000000 	.word	0x20000000
 80005e8:	0800577c 	.word	0x0800577c
 80005ec:	200003c4 	.word	0x200003c4
 80005f0:	08005798 	.word	0x08005798
 80005f4:	200003c8 	.word	0x200003c8

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f004 ffd6 	bl	80055b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <SystemClock_Config+0xb4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <SystemClock_Config+0xb4>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <SystemClock_Config+0xb4>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <SystemClock_Config+0xb8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <SystemClock_Config+0xb8>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <SystemClock_Config+0xb8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2310      	movs	r3, #16
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000660:	2300      	movs	r3, #0
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fb0d 	bl	8002c88 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000674:	f000 f9bc 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f002 fd70 	bl	8003178 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800069e:	f000 f9a7 	bl	80009f0 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	463b      	mov	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]



  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006c6:	4b29      	ldr	r3, [pc, #164]	; (800076c <MX_ADC1_Init+0xb8>)
 80006c8:	4a29      	ldr	r2, [pc, #164]	; (8000770 <MX_ADC1_Init+0xbc>)
 80006ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006cc:	4b27      	ldr	r3, [pc, #156]	; (800076c <MX_ADC1_Init+0xb8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d2:	4b26      	ldr	r3, [pc, #152]	; (800076c <MX_ADC1_Init+0xb8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006d8:	4b24      	ldr	r3, [pc, #144]	; (800076c <MX_ADC1_Init+0xb8>)
 80006da:	2201      	movs	r2, #1
 80006dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006de:	4b23      	ldr	r3, [pc, #140]	; (800076c <MX_ADC1_Init+0xb8>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_ADC1_Init+0xb8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ADC1_Init+0xb8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_ADC1_Init+0xb8>)
 80006f4:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <MX_ADC1_Init+0xc0>)
 80006f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_ADC1_Init+0xb8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_ADC1_Init+0xb8>)
 8000700:	2202      	movs	r2, #2
 8000702:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_ADC1_Init+0xb8>)
 8000706:	2201      	movs	r2, #1
 8000708:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_ADC1_Init+0xb8>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000712:	4816      	ldr	r0, [pc, #88]	; (800076c <MX_ADC1_Init+0xb8>)
 8000714:	f000 febe 	bl	8001494 <HAL_ADC_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800071e:	f000 f967 	bl	80009f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000726:	2301      	movs	r3, #1
 8000728:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800072a:	2307      	movs	r3, #7
 800072c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	4619      	mov	r1, r3
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <MX_ADC1_Init+0xb8>)
 8000734:	f001 f9ce 	bl	8001ad4 <HAL_ADC_ConfigChannel>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800073e:	f000 f957 	bl	80009f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000742:	2301      	movs	r3, #1
 8000744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000746:	2302      	movs	r3, #2
 8000748:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800074a:	2306      	movs	r3, #6
 800074c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_ADC1_Init+0xb8>)
 8000754:	f001 f9be 	bl	8001ad4 <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800075e:	f000 f947 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200003cc 	.word	0x200003cc
 8000770:	40012000 	.word	0x40012000
 8000774:	0f000001 	.word	0x0f000001

08000778 <MX_SPI2_Init>:


static void MX_SPI2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_SPI2_Init+0x64>)
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_SPI2_Init+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_SPI2_Init+0x64>)
 8000784:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000788:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_SPI2_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_SPI2_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_SPI2_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_SPI2_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_SPI2_Init+0x64>)
 80007a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_SPI2_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_SPI2_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_SPI2_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_SPI2_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_SPI2_Init+0x64>)
 80007c4:	220a      	movs	r2, #10
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_SPI2_Init+0x64>)
 80007ca:	f002 fe81 	bl	80034d0 <HAL_SPI_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007d4:	f000 f90c 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000480 	.word	0x20000480
 80007e0:	40003800 	.word	0x40003800

080007e4 <StartDefaultTask>:
  //}
  /* USER CODE END 5 */
//}

void StartDefaultTask(void const * argument)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  	    HAL_ADC_Start_IT(&hadc1);
 80007ec:	4825      	ldr	r0, [pc, #148]	; (8000884 <StartDefaultTask+0xa0>)
 80007ee:	f000 fe95 	bl	800151c <HAL_ADC_Start_IT>
	        nrf24_setMode(&nrfTx, txMode);
 80007f2:	2102      	movs	r1, #2
 80007f4:	4824      	ldr	r0, [pc, #144]	; (8000888 <StartDefaultTask+0xa4>)
 80007f6:	f000 f9f3 	bl	8000be0 <nrf24_setMode>
	        if ((valor_adc[1]>=1700) && (valor_adc[1]<=3000))
 80007fa:	4b24      	ldr	r3, [pc, #144]	; (800088c <StartDefaultTask+0xa8>)
 80007fc:	885b      	ldrh	r3, [r3, #2]
 80007fe:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8000802:	4293      	cmp	r3, r2
 8000804:	d916      	bls.n	8000834 <StartDefaultTask+0x50>
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <StartDefaultTask+0xa8>)
 8000808:	885b      	ldrh	r3, [r3, #2]
 800080a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800080e:	4293      	cmp	r3, r2
 8000810:	d810      	bhi.n	8000834 <StartDefaultTask+0x50>
	        	  	  {
	        	  		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
	        	  		  if (nrf24_Transmit(&nrfTx, txData4, sizeof(txData4)) == 1) {
 8000812:	2216      	movs	r2, #22
 8000814:	491e      	ldr	r1, [pc, #120]	; (8000890 <StartDefaultTask+0xac>)
 8000816:	481c      	ldr	r0, [pc, #112]	; (8000888 <StartDefaultTask+0xa4>)
 8000818:	f000 fa49 	bl	8000cae <nrf24_Transmit>
 800081c:	4603      	mov	r3, r0
 800081e:	2b01      	cmp	r3, #1
 8000820:	d108      	bne.n	8000834 <StartDefaultTask+0x50>
	        	  			  nrf24_setMode(&nrfTx, standby);
 8000822:	2101      	movs	r1, #1
 8000824:	4818      	ldr	r0, [pc, #96]	; (8000888 <StartDefaultTask+0xa4>)
 8000826:	f000 f9db 	bl	8000be0 <nrf24_setMode>
	        	  			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	2102      	movs	r1, #2
 800082e:	4819      	ldr	r0, [pc, #100]	; (8000894 <StartDefaultTask+0xb0>)
 8000830:	f002 fa10 	bl	8002c54 <HAL_GPIO_WritePin>





	        if((valor_adc[1]>=3100))
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <StartDefaultTask+0xa8>)
 8000836:	885b      	ldrh	r3, [r3, #2]
 8000838:	f640 421b 	movw	r2, #3099	; 0xc1b
 800083c:	4293      	cmp	r3, r2
 800083e:	d90b      	bls.n	8000858 <StartDefaultTask+0x74>
	        	  	  {

	        	  		  if (nrf24_Transmit(&nrfTx, txData1, sizeof(txData1)) == 1) {
 8000840:	2216      	movs	r2, #22
 8000842:	4915      	ldr	r1, [pc, #84]	; (8000898 <StartDefaultTask+0xb4>)
 8000844:	4810      	ldr	r0, [pc, #64]	; (8000888 <StartDefaultTask+0xa4>)
 8000846:	f000 fa32 	bl	8000cae <nrf24_Transmit>
 800084a:	4603      	mov	r3, r0
 800084c:	2b01      	cmp	r3, #1
 800084e:	d103      	bne.n	8000858 <StartDefaultTask+0x74>
	        	    		  nrf24_setMode(&nrfTx, standby);
 8000850:	2101      	movs	r1, #1
 8000852:	480d      	ldr	r0, [pc, #52]	; (8000888 <StartDefaultTask+0xa4>)
 8000854:	f000 f9c4 	bl	8000be0 <nrf24_setMode>

	        	  		  }
	        	  		  //HAL_Delay(1000);
	        	  	  }

	       if((valor_adc[1]<=1000))
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <StartDefaultTask+0xa8>)
 800085a:	885b      	ldrh	r3, [r3, #2]
 800085c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000860:	d80b      	bhi.n	800087a <StartDefaultTask+0x96>
	        	  	{

	        	  		if (nrf24_Transmit(&nrfTx, txData2, sizeof(txData2)) == 1) {
 8000862:	2216      	movs	r2, #22
 8000864:	490d      	ldr	r1, [pc, #52]	; (800089c <StartDefaultTask+0xb8>)
 8000866:	4808      	ldr	r0, [pc, #32]	; (8000888 <StartDefaultTask+0xa4>)
 8000868:	f000 fa21 	bl	8000cae <nrf24_Transmit>
 800086c:	4603      	mov	r3, r0
 800086e:	2b01      	cmp	r3, #1
 8000870:	d103      	bne.n	800087a <StartDefaultTask+0x96>
	        	  		    nrf24_setMode(&nrfTx, standby);
 8000872:	2101      	movs	r1, #1
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <StartDefaultTask+0xa4>)
 8000876:	f000 f9b3 	bl	8000be0 <nrf24_setMode>

	        	  		 }
	        	  		  		  //HAL_Delay(1000);
	        	  	}

	        	  	osDelay(100);///////////////////////////////////////////////////////////////
 800087a:	2064      	movs	r0, #100	; 0x64
 800087c:	f003 fc49 	bl	8004112 <osDelay>
	  	    HAL_ADC_Start_IT(&hadc1);
 8000880:	e7b4      	b.n	80007ec <StartDefaultTask+0x8>
 8000882:	bf00      	nop
 8000884:	200003cc 	.word	0x200003cc
 8000888:	200004d8 	.word	0x200004d8
 800088c:	2000047c 	.word	0x2000047c
 8000890:	20000068 	.word	0x20000068
 8000894:	40020400 	.word	0x40020400
 8000898:	20000020 	.word	0x20000020
 800089c:	20000038 	.word	0x20000038

080008a0 <StartTask02>:
  }
  /* USER CODE END 5 */
}

void StartTask02(void const * argument)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
		        	  			  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);

		        	  		  //}
		        	  	  //}

		        if((valor_adc[0]>=3100))
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <StartTask02+0x60>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	f640 421b 	movw	r2, #3099	; 0xc1b
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d910      	bls.n	80008d6 <StartTask02+0x36>
		        	  	  {
		        	  		  if (nrf24_Transmit(&nrfTx, txData, sizeof(txData)) == 1)
 80008b4:	2216      	movs	r2, #22
 80008b6:	4913      	ldr	r1, [pc, #76]	; (8000904 <StartTask02+0x64>)
 80008b8:	4813      	ldr	r0, [pc, #76]	; (8000908 <StartTask02+0x68>)
 80008ba:	f000 f9f8 	bl	8000cae <nrf24_Transmit>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d108      	bne.n	80008d6 <StartTask02+0x36>
		        	  		  {
		        	  			  nrf24_setMode(&nrfTx, standby);
 80008c4:	2101      	movs	r1, #1
 80008c6:	4810      	ldr	r0, [pc, #64]	; (8000908 <StartTask02+0x68>)
 80008c8:	f000 f98a 	bl	8000be0 <nrf24_setMode>
		        	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2102      	movs	r1, #2
 80008d0:	480e      	ldr	r0, [pc, #56]	; (800090c <StartTask02+0x6c>)
 80008d2:	f002 f9bf 	bl	8002c54 <HAL_GPIO_WritePin>

		        	  		  }
		        	  	  }


		        if((valor_adc[0]<=1000))
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <StartTask02+0x60>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008de:	d80b      	bhi.n	80008f8 <StartTask02+0x58>
		        	  	  {

		        	  		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
		        	  		  if (nrf24_Transmit(&nrfTx, txData3, sizeof(txData3)) == 1) {
 80008e0:	2216      	movs	r2, #22
 80008e2:	490b      	ldr	r1, [pc, #44]	; (8000910 <StartTask02+0x70>)
 80008e4:	4808      	ldr	r0, [pc, #32]	; (8000908 <StartTask02+0x68>)
 80008e6:	f000 f9e2 	bl	8000cae <nrf24_Transmit>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d103      	bne.n	80008f8 <StartTask02+0x58>
		        	  			  nrf24_setMode(&nrfTx, standby);
 80008f0:	2101      	movs	r1, #1
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <StartTask02+0x68>)
 80008f4:	f000 f974 	bl	8000be0 <nrf24_setMode>

		        	  		  }
		        	  		  //HAL_Delay(1000);
		        	  	  }

		        osDelay(100);///////////////////////////////////////////////////////////////
 80008f8:	2064      	movs	r0, #100	; 0x64
 80008fa:	f003 fc0a 	bl	8004112 <osDelay>
		        if((valor_adc[0]>=3100))
 80008fe:	e7d3      	b.n	80008a8 <StartTask02+0x8>
 8000900:	2000047c 	.word	0x2000047c
 8000904:	20000008 	.word	0x20000008
 8000908:	200004d8 	.word	0x200004d8
 800090c:	40020400 	.word	0x40020400
 8000910:	20000050 	.word	0x20000050

08000914 <HAL_ADC_ConvCpltCallback>:




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a09      	ldr	r2, [pc, #36]	; (8000948 <HAL_ADC_ConvCpltCallback+0x34>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d109      	bne.n	800093a <HAL_ADC_ConvCpltCallback+0x26>
	{
		valor_adc[0] = (uint16_t)adc_buf[0];
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_ADC_ConvCpltCallback+0x38>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_ADC_ConvCpltCallback+0x3c>)
 800092e:	801a      	strh	r2, [r3, #0]
		valor_adc[1] = (uint16_t)adc_buf[1];
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_ADC_ConvCpltCallback+0x38>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	b29a      	uxth	r2, r3
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000938:	805a      	strh	r2, [r3, #2]

	}
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40012000 	.word	0x40012000
 800094c:	20000474 	.word	0x20000474
 8000950:	2000047c 	.word	0x2000047c

08000954 <MX_DMA_Init>:




static void MX_DMA_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_DMA_Init+0x3c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <MX_DMA_Init+0x3c>)
 8000964:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_DMA_Init+0x3c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	2038      	movs	r0, #56	; 0x38
 800097c:	f001 fc3f 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000980:	2038      	movs	r0, #56	; 0x38
 8000982:	f001 fc58 	bl	8002236 <HAL_NVIC_EnableIRQ>

}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_GPIO_Init+0x54>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <MX_GPIO_Init+0x54>)
 80009b2:	f043 0302 	orr.w	r3, r3, #2
 80009b6:	6313      	str	r3, [r2, #48]	; 0x30
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_GPIO_Init+0x54>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009bc:	f003 0302 	and.w	r3, r3, #2
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);

	  /*Configure GPIO pin : PB12 */
	  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_12|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009c4:	f241 03bf 	movw	r3, #4287	; 0x10bf
 80009c8:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	4619      	mov	r1, r3
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_GPIO_Init+0x58>)
 80009dc:	f001 ffb6 	bl	800294c <HAL_GPIO_Init>

}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020400 	.word	0x40020400

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>

080009fa <nrf24_init>:
		uint16_t len);
static void nrf_sendCmd(nrf24 *node, uint8_t cmd);
static void nrf24_reset(nrf24 *node, uint8_t reg);

/* Exported functions --------------------------------------------------------*/
void nrf24_init(nrf24 *node) {
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f000 f9c6 	bl	8000d94 <nrf24_CE_disable>

	nrf24_writeReg(node, CONFIG, 0);  			//No IRQ, no CRC
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 f9f1 	bl	8000df4 <nrf24_writeReg>
	node->crc = no_CRC;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2200      	movs	r2, #0
 8000a16:	77da      	strb	r2, [r3, #31]
	nrf24_writeReg(node, EN_AA, 0x00); 			//No auto ACK
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 f9e9 	bl	8000df4 <nrf24_writeReg>
	nrf24_writeReg(node, EN_RXADDR, 0x00);	//Not enabling any data pipe
 8000a22:	2200      	movs	r2, #0
 8000a24:	2102      	movs	r1, #2
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f000 f9e4 	bl	8000df4 <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_AW, 0x03);  	//5 Bytes for the TX/RX address
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	2103      	movs	r1, #3
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 f9df 	bl	8000df4 <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_RETR, 0);   	//No retransmission
 8000a36:	2200      	movs	r2, #0
 8000a38:	2104      	movs	r1, #4
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f000 f9da 	bl	8000df4 <nrf24_writeReg>

	nrf24_setDataRate(node, _250kbs);		//set minimum dataRate
 8000a40:	2100      	movs	r1, #0
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f000 f813 	bl	8000a6e <nrf24_setDataRate>
	nrf24_setPALevel(node, high);				//set maximum PALevel 0dBm
 8000a48:	2103      	movs	r1, #3
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f000 f85a 	bl	8000b04 <nrf24_setPALevel>
	nrf24_setChannel(node, DEFAULT_CHANNEL);	//default channel 100
 8000a50:	2164      	movs	r1, #100	; 0x64
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f000 f8ae 	bl	8000bb4 <nrf24_setChannel>
	nrf24_setMode(node, standby);		//set STANDBY mode
 8000a58:	2101      	movs	r1, #1
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f000 f8c0 	bl	8000be0 <nrf24_setMode>

	nrf24_CE_enable(node);	// Enable the chip after configuring the device
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f000 f987 	bl	8000d74 <nrf24_CE_enable>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <nrf24_setDataRate>:
// -----------------------------------------------------------------------------

//set module bitrate
void nrf24_setDataRate(nrf24 *node, DataRate _bitRate) {
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b084      	sub	sp, #16
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	460b      	mov	r3, r1
 8000a78:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 f98a 	bl	8000d94 <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 8000a80:	2106      	movs	r1, #6
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 fa1d 	bl	8000ec2 <nrf24_readReg>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	73fb      	strb	r3, [r7, #15]

	switch (_bitRate) {
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d01e      	beq.n	8000ad0 <nrf24_setDataRate+0x62>
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	dc28      	bgt.n	8000ae8 <nrf24_setDataRate+0x7a>
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d002      	beq.n	8000aa0 <nrf24_setDataRate+0x32>
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d00c      	beq.n	8000ab8 <nrf24_setDataRate+0x4a>
			config |= (1 << 3);
			node->bitRate = _2mbs;
			break;

		default:
			break;
 8000a9e:	e023      	b.n	8000ae8 <nrf24_setDataRate+0x7a>
			config |= (1 << 5);		//write 1 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	f043 0320 	orr.w	r3, r3, #32
 8000aa6:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 3);
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	f023 0308 	bic.w	r3, r3, #8
 8000aae:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _250kbs;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	775a      	strb	r2, [r3, #29]
			break;
 8000ab6:	e018      	b.n	8000aea <nrf24_setDataRate+0x7c>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	f023 0320 	bic.w	r3, r3, #32
 8000abe:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 3);
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	f023 0308 	bic.w	r3, r3, #8
 8000ac6:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _1mbs;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2201      	movs	r2, #1
 8000acc:	775a      	strb	r2, [r3, #29]
			break;
 8000ace:	e00c      	b.n	8000aea <nrf24_setDataRate+0x7c>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 1 in RF_DR_HIGH bits
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	f023 0320 	bic.w	r3, r3, #32
 8000ad6:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 3);
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	f043 0308 	orr.w	r3, r3, #8
 8000ade:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _2mbs;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	775a      	strb	r2, [r3, #29]
			break;
 8000ae6:	e000      	b.n	8000aea <nrf24_setDataRate+0x7c>
			break;
 8000ae8:	bf00      	nop
	}
	nrf24_writeReg(node, RF_SETUP, config);
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	461a      	mov	r2, r3
 8000aee:	2106      	movs	r1, #6
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 f97f 	bl	8000df4 <nrf24_writeReg>
	nrf24_CE_enable(node);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f93c 	bl	8000d74 <nrf24_CE_enable>
}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <nrf24_setPALevel>:
// -----------------------------------------------------------------------------

//set PAlevel module in TX mode
void nrf24_setPALevel(nrf24 *node, PaLevel pwr) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f000 f93f 	bl	8000d94 <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 8000b16:	2106      	movs	r1, #6
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f000 f9d2 	bl	8000ec2 <nrf24_readReg>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	73fb      	strb	r3, [r7, #15]

	switch (pwr) {
 8000b22:	78fb      	ldrb	r3, [r7, #3]
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	d837      	bhi.n	8000b98 <nrf24_setPALevel+0x94>
 8000b28:	a201      	add	r2, pc, #4	; (adr r2, 8000b30 <nrf24_setPALevel+0x2c>)
 8000b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2e:	bf00      	nop
 8000b30:	08000b41 	.word	0x08000b41
 8000b34:	08000b59 	.word	0x08000b59
 8000b38:	08000b71 	.word	0x08000b71
 8000b3c:	08000b89 	.word	0x08000b89
		case veryLow:
			config &= ~(1 << 2);	//write 0 in the RF_PWR bits
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	f023 0304 	bic.w	r3, r3, #4
 8000b46:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 1);
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	f023 0302 	bic.w	r3, r3, #2
 8000b4e:	73fb      	strb	r3, [r7, #15]
			node->pa = veryLow;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	771a      	strb	r2, [r3, #28]
			break;
 8000b56:	e020      	b.n	8000b9a <nrf24_setPALevel+0x96>

		case low:
			config &= ~(1 << 2);	//write 1 in the RF_PWR bits
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	f023 0304 	bic.w	r3, r3, #4
 8000b5e:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 1);
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	73fb      	strb	r3, [r7, #15]
			node->pa = low;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	771a      	strb	r2, [r3, #28]
			break;
 8000b6e:	e014      	b.n	8000b9a <nrf24_setPALevel+0x96>

		case mid:
			config |= (1 << 2);		//write 2 in the RF_PWR bits
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 1);
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	f023 0302 	bic.w	r3, r3, #2
 8000b7e:	73fb      	strb	r3, [r7, #15]
			node->pa = mid;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2202      	movs	r2, #2
 8000b84:	771a      	strb	r2, [r3, #28]
			break;
 8000b86:	e008      	b.n	8000b9a <nrf24_setPALevel+0x96>

		case high:
			config |= (1 << 2) | (1 << 1);	//write 3 in the RF_PWR bits
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	f043 0306 	orr.w	r3, r3, #6
 8000b8e:	73fb      	strb	r3, [r7, #15]
			node->pa = high;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2203      	movs	r2, #3
 8000b94:	771a      	strb	r2, [r3, #28]
			break;
 8000b96:	e000      	b.n	8000b9a <nrf24_setPALevel+0x96>

		default:
			break;
 8000b98:	bf00      	nop
	}
	nrf24_writeReg(node, RF_SETUP, config);
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	2106      	movs	r1, #6
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f000 f927 	bl	8000df4 <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f8e4 	bl	8000d74 <nrf24_CE_enable>
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <nrf24_setChannel>:
// -----------------------------------------------------------------------------

//Set the channel device
void nrf24_setChannel(nrf24 *node, uint8_t channel) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f000 f8e7 	bl	8000d94 <nrf24_CE_disable>
	nrf24_writeReg(node, RF_CH, channel);  // select the channel
 8000bc6:	78fb      	ldrb	r3, [r7, #3]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	2105      	movs	r1, #5
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f000 f911 	bl	8000df4 <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f000 f8ce 	bl	8000d74 <nrf24_CE_enable>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <nrf24_setMode>:
// -----------------------------------------------------------------------------

//Set the module operation mode
void nrf24_setMode(nrf24 *node, Mode _mode) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	70fb      	strb	r3, [r7, #3]
	uint8_t config = nrf24_readReg(node, CONFIG);
 8000bec:	2100      	movs	r1, #0
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f967 	bl	8000ec2 <nrf24_readReg>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	73fb      	strb	r3, [r7, #15]

	switch (_mode) {
 8000bf8:	78fb      	ldrb	r3, [r7, #3]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d837      	bhi.n	8000c6e <nrf24_setMode+0x8e>
 8000bfe:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <nrf24_setMode+0x24>)
 8000c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c04:	08000c15 	.word	0x08000c15
 8000c08:	08000c25 	.word	0x08000c25
 8000c0c:	08000c3b 	.word	0x08000c3b
 8000c10:	08000c59 	.word	0x08000c59
		case pwrDown:
			config &= ~(1 << 1);	//write 0 in the PWR_UP bit
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	f023 0302 	bic.w	r3, r3, #2
 8000c1a:	73fb      	strb	r3, [r7, #15]
			node->mode = pwrDown;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	779a      	strb	r2, [r3, #30]
			break;
 8000c22:	e025      	b.n	8000c70 <nrf24_setMode+0x90>

		case standby:
			nrf24_CE_disable(node);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 f8b5 	bl	8000d94 <nrf24_CE_disable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	73fb      	strb	r3, [r7, #15]
			node->mode = standby;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2201      	movs	r2, #1
 8000c36:	779a      	strb	r2, [r3, #30]
			break;
 8000c38:	e01a      	b.n	8000c70 <nrf24_setMode+0x90>

		case txMode:
			nrf24_CE_enable(node);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f000 f89a 	bl	8000d74 <nrf24_CE_enable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 0);	//write 0 in the PRIM_RX bit
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	f023 0301 	bic.w	r3, r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
			node->mode = txMode;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2202      	movs	r2, #2
 8000c54:	779a      	strb	r2, [r3, #30]
			break;
 8000c56:	e00b      	b.n	8000c70 <nrf24_setMode+0x90>

		case rxMode:
			nrf24_CE_enable(node);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f000 f88b 	bl	8000d74 <nrf24_CE_enable>
			config |= (1 << 1) | (1 << 0); //write 1 in the PWR_UP and PRIM_RX bits
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	f043 0303 	orr.w	r3, r3, #3
 8000c64:	73fb      	strb	r3, [r7, #15]
			node->mode = rxMode;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2203      	movs	r2, #3
 8000c6a:	779a      	strb	r2, [r3, #30]
			break;
 8000c6c:	e000      	b.n	8000c70 <nrf24_setMode+0x90>

		default:
			break;
 8000c6e:	bf00      	nop
	}
	nrf24_writeReg(node, CONFIG, config);
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	461a      	mov	r2, r3
 8000c74:	2100      	movs	r1, #0
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 f8bc 	bl	8000df4 <nrf24_writeReg>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <nrf24_setTxAddr>:
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
}
// -----------------------------------------------------------------------------

// set up the Tx mode
void nrf24_setTxAddr(nrf24 *node, uint8_t *Address) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f000 f880 	bl	8000d94 <nrf24_CE_disable>
	nrf24_writeRegMulti(node, TX_ADDR, Address, 5);  // Write the TX address
 8000c94:	2305      	movs	r3, #5
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	2110      	movs	r1, #16
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f000 f8d5 	bl	8000e4a <nrf24_writeRegMulti>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f000 f867 	bl	8000d74 <nrf24_CE_enable>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <nrf24_Transmit>:
// -----------------------------------------------------------------------------

//transmit the data
uint8_t nrf24_Transmit(nrf24 *node, uint8_t *data, uint8_t len) {
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b088      	sub	sp, #32
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdtosend = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	75bb      	strb	r3, [r7, #22]

	nrf24_CSN_enable(node);		//select the device
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f000 f877 	bl	8000db4 <nrf24_CSN_enable>
	cmdtosend = W_TX_PAYLOAD;	//payload command
 8000cc6:	23a0      	movs	r3, #160	; 0xa0
 8000cc8:	75bb      	strb	r3, [r7, #22]
	HAL_SPI_Transmit(node->hSPIx, &cmdtosend, 1, NRF_TX_TIMEOUT);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6998      	ldr	r0, [r3, #24]
 8000cce:	f107 0116 	add.w	r1, r7, #22
 8000cd2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f002 fc83 	bl	80035e2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000cdc:	bf00      	nop
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 f86c 	bl	8003dc0 <HAL_SPI_GetState>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d1f7      	bne.n	8000cde <nrf24_Transmit+0x30>
	// send the payload
	if (len < 33) HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b20      	cmp	r3, #32
 8000cf2:	d808      	bhi.n	8000d06 <nrf24_Transmit+0x58>
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	6998      	ldr	r0, [r3, #24]
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	f002 fc6e 	bl	80035e2 <HAL_SPI_Transmit>
	nrf24_CSN_disable(node);	//Unselect the device
 8000d06:	68f8      	ldr	r0, [r7, #12]
 8000d08:	f000 f864 	bl	8000dd4 <nrf24_CSN_disable>

	uint8_t timeout = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	77fb      	strb	r3, [r7, #31]
	while (timeout++ < 10) {
 8000d10:	e026      	b.n	8000d60 <nrf24_Transmit+0xb2>
		for (int i = 0; i < 200; ++i) {
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
 8000d16:	e003      	b.n	8000d20 <nrf24_Transmit+0x72>
			__ASM("NOP");
 8000d18:	bf00      	nop
		for (int i = 0; i < 200; ++i) {
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	61bb      	str	r3, [r7, #24]
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2bc7      	cmp	r3, #199	; 0xc7
 8000d24:	ddf8      	ble.n	8000d18 <nrf24_Transmit+0x6a>
		}
		uint8_t fifostatus = nrf24_readReg(node, FIFO_STATUS);
 8000d26:	2117      	movs	r1, #23
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f000 f8ca 	bl	8000ec2 <nrf24_readReg>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	75fb      	strb	r3, [r7, #23]

		//check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
		if ((fifostatus & (1 << 4)) && (!(fifostatus & (1 << 3)))) {
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
 8000d34:	f003 0310 	and.w	r3, r3, #16
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d011      	beq.n	8000d60 <nrf24_Transmit+0xb2>
 8000d3c:	7dfb      	ldrb	r3, [r7, #23]
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d10c      	bne.n	8000d60 <nrf24_Transmit+0xb2>
			cmdtosend = FLUSH_TX;
 8000d46:	23e1      	movs	r3, #225	; 0xe1
 8000d48:	75bb      	strb	r3, [r7, #22]
			nrf_sendCmd(node, cmdtosend);
 8000d4a:	7dbb      	ldrb	r3, [r7, #22]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f000 f8e4 	bl	8000f1c <nrf_sendCmd>
			nrf24_reset(node, FIFO_STATUS);	//reset FIFO_STATUS
 8000d54:	2117      	movs	r1, #23
 8000d56:	68f8      	ldr	r0, [r7, #12]
 8000d58:	f000 f902 	bl	8000f60 <nrf24_reset>
			return (1);
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e005      	b.n	8000d6c <nrf24_Transmit+0xbe>
	while (timeout++ < 10) {
 8000d60:	7ffb      	ldrb	r3, [r7, #31]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	77fa      	strb	r2, [r7, #31]
 8000d66:	2b09      	cmp	r3, #9
 8000d68:	d9d3      	bls.n	8000d12 <nrf24_Transmit+0x64>
		}
	}
	return (0);
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <nrf24_CE_enable>:
		*(data + i) = nrf24_readReg(node, i - 12);
}
// -----------------------------------------------------------------------------

/* privated functions --------------------------------------------------------*/
static void nrf24_CE_enable(nrf24 *node) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_SET);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6898      	ldr	r0, [r3, #8]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	899b      	ldrh	r3, [r3, #12]
 8000d84:	2201      	movs	r2, #1
 8000d86:	4619      	mov	r1, r3
 8000d88:	f001 ff64 	bl	8002c54 <HAL_GPIO_WritePin>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <nrf24_CE_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CE_disable(nrf24 *node) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_RESET);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6898      	ldr	r0, [r3, #8]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	899b      	ldrh	r3, [r3, #12]
 8000da4:	2200      	movs	r2, #0
 8000da6:	4619      	mov	r1, r3
 8000da8:	f001 ff54 	bl	8002c54 <HAL_GPIO_WritePin>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <nrf24_CSN_enable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_enable(nrf24 *node) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_RESET);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	889b      	ldrh	r3, [r3, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f001 ff44 	bl	8002c54 <HAL_GPIO_WritePin>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <nrf24_CSN_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_disable(nrf24 *node) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_SET);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	889b      	ldrh	r3, [r3, #4]
 8000de4:	2201      	movs	r2, #1
 8000de6:	4619      	mov	r1, r3
 8000de8:	f001 ff34 	bl	8002c54 <HAL_GPIO_WritePin>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <nrf24_writeReg>:
// -----------------------------------------------------------------------------

//write a value(s) in a register(s) by an address
static void nrf24_writeReg(nrf24 *node, uint8_t reg, uint8_t data) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
 8000e00:	4613      	mov	r3, r2
 8000e02:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	f043 0320 	orr.w	r3, r3, #32
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 8000e0e:	78bb      	ldrb	r3, [r7, #2]
 8000e10:	737b      	strb	r3, [r7, #13]
	nrf24_CSN_enable(node);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffce 	bl	8000db4 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 2, NRF_TX_TIMEOUT);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6998      	ldr	r0, [r3, #24]
 8000e1c:	f107 010c 	add.w	r1, r7, #12
 8000e20:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e24:	2202      	movs	r2, #2
 8000e26:	f002 fbdc 	bl	80035e2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000e2a:	bf00      	nop
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f002 ffc5 	bl	8003dc0 <HAL_SPI_GetState>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d1f7      	bne.n	8000e2c <nrf24_writeReg+0x38>
	nrf24_CSN_disable(node);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ffc9 	bl	8000dd4 <nrf24_CSN_disable>
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <nrf24_writeRegMulti>:
// -----------------------------------------------------------------------------

//write multiple values in a registers by an address
static void nrf24_writeRegMulti(nrf24 *node, uint8_t reg, uint8_t *data,
		uint16_t len) {
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	60f8      	str	r0, [r7, #12]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	461a      	mov	r2, r3
 8000e56:	460b      	mov	r3, r1
 8000e58:	72fb      	strb	r3, [r7, #11]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	813b      	strh	r3, [r7, #8]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8000e5e:	7afb      	ldrb	r3, [r7, #11]
 8000e60:	f043 0320 	orr.w	r3, r3, #32
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	753b      	strb	r3, [r7, #20]
	nrf24_CSN_enable(node);
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f7ff ffa3 	bl	8000db4 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 1, NRF_TX_TIMEOUT);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6998      	ldr	r0, [r3, #24]
 8000e72:	f107 0114 	add.w	r1, r7, #20
 8000e76:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f002 fbb1 	bl	80035e2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000e80:	bf00      	nop
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f002 ff9a 	bl	8003dc0 <HAL_SPI_GetState>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d1f7      	bne.n	8000e82 <nrf24_writeRegMulti+0x38>
	HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6998      	ldr	r0, [r3, #24]
 8000e96:	893a      	ldrh	r2, [r7, #8]
 8000e98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	f002 fba0 	bl	80035e2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000ea2:	bf00      	nop
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f002 ff89 	bl	8003dc0 <HAL_SPI_GetState>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d1f7      	bne.n	8000ea4 <nrf24_writeRegMulti+0x5a>
	nrf24_CSN_disable(node);
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f7ff ff8d 	bl	8000dd4 <nrf24_CSN_disable>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <nrf24_readReg>:
// -----------------------------------------------------------------------------

//read a value from a register by an address
static uint8_t nrf24_readReg(nrf24 *node, uint8_t reg) {
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	70fb      	strb	r3, [r7, #3]
	uint8_t data = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]
	nrf24_CSN_enable(node);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ff6e 	bl	8000db4 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, &reg, 1, NRF_TX_TIMEOUT);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6998      	ldr	r0, [r3, #24]
 8000edc:	1cf9      	adds	r1, r7, #3
 8000ede:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f002 fb7d 	bl	80035e2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000ee8:	bf00      	nop
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 ff66 	bl	8003dc0 <HAL_SPI_GetState>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d1f7      	bne.n	8000eea <nrf24_readReg+0x28>
	HAL_SPI_Receive(node->hSPIx, &data, 1, NRF_RX_TIMEOUT);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6998      	ldr	r0, [r3, #24]
 8000efe:	f107 010f 	add.w	r1, r7, #15
 8000f02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f06:	2201      	movs	r2, #1
 8000f08:	f002 fca7 	bl	800385a <HAL_SPI_Receive>
	nrf24_CSN_disable(node);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff61 	bl	8000dd4 <nrf24_CSN_disable>
	return data;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <nrf_sendCmd>:
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
	nrf24_CSN_disable(node);
}
// -----------------------------------------------------------------------------

static void nrf_sendCmd(nrf24 *node, uint8_t cmd) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	70fb      	strb	r3, [r7, #3]
	nrf24_CSN_enable(node);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ff43 	bl	8000db4 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, &cmd, 1, NRF_TX_TIMEOUT);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6998      	ldr	r0, [r3, #24]
 8000f32:	1cf9      	adds	r1, r7, #3
 8000f34:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f002 fb52 	bl	80035e2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000f3e:	bf00      	nop
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 ff3b 	bl	8003dc0 <HAL_SPI_GetState>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d1f7      	bne.n	8000f40 <nrf_sendCmd+0x24>
	nrf24_CSN_disable(node);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff3f 	bl	8000dd4 <nrf24_CSN_disable>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <nrf24_reset>:
// -----------------------------------------------------------------------------

static void nrf24_reset(nrf24 *node, uint8_t reg) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
	if (reg == STATUS)
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	2b07      	cmp	r3, #7
 8000f70:	d105      	bne.n	8000f7e <nrf24_reset+0x1e>
		nrf24_writeReg(node, STATUS, 0x00);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2107      	movs	r1, #7
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ff3c 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
		nrf24_writeReg(node, DYNPD, 0);
		nrf24_writeReg(node, FEATURE, 0);
	}
}
 8000f7c:	e0a8      	b.n	80010d0 <nrf24_reset+0x170>
	else if (reg == FIFO_STATUS)
 8000f7e:	78fb      	ldrb	r3, [r7, #3]
 8000f80:	2b17      	cmp	r3, #23
 8000f82:	d105      	bne.n	8000f90 <nrf24_reset+0x30>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 8000f84:	2211      	movs	r2, #17
 8000f86:	2117      	movs	r1, #23
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff33 	bl	8000df4 <nrf24_writeReg>
}
 8000f8e:	e09f      	b.n	80010d0 <nrf24_reset+0x170>
		nrf24_writeReg(node, CONFIG, 0x08);
 8000f90:	2208      	movs	r2, #8
 8000f92:	2100      	movs	r1, #0
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff2d 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, EN_AA, 0x3F);
 8000f9a:	223f      	movs	r2, #63	; 0x3f
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ff28 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, EN_RXADDR, 0x03);
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	2102      	movs	r1, #2
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ff23 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_AW, 0x03);
 8000fae:	2203      	movs	r2, #3
 8000fb0:	2103      	movs	r1, #3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ff1e 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_RETR, 0x03);
 8000fb8:	2203      	movs	r2, #3
 8000fba:	2104      	movs	r1, #4
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff19 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, RF_CH, 0x02);
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	2105      	movs	r1, #5
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ff14 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, RF_SETUP, 0x0E);
 8000fcc:	220e      	movs	r2, #14
 8000fce:	2106      	movs	r1, #6
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff0f 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, STATUS, 0x00);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2107      	movs	r1, #7
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ff0a 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, OBSERVE_TX, 0x00);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2108      	movs	r1, #8
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff05 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, RPD, 0x00);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2109      	movs	r1, #9
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff00 	bl	8000df4 <nrf24_writeReg>
		uint8_t rx_addr_p0_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 8000ff4:	4a38      	ldr	r2, [pc, #224]	; (80010d8 <nrf24_reset+0x178>)
 8000ff6:	f107 0318 	add.w	r3, r7, #24
 8000ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ffe:	6018      	str	r0, [r3, #0]
 8001000:	3304      	adds	r3, #4
 8001002:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, RX_ADDR_P0, rx_addr_p0_def, 5);
 8001004:	f107 0218 	add.w	r2, r7, #24
 8001008:	2305      	movs	r3, #5
 800100a:	210a      	movs	r1, #10
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff1c 	bl	8000e4a <nrf24_writeRegMulti>
		uint8_t rx_addr_p1_def[5] = { 0xC2, 0xC2, 0xC2, 0xC2, 0xC2 };
 8001012:	4a32      	ldr	r2, [pc, #200]	; (80010dc <nrf24_reset+0x17c>)
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	e892 0003 	ldmia.w	r2, {r0, r1}
 800101c:	6018      	str	r0, [r3, #0]
 800101e:	3304      	adds	r3, #4
 8001020:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, RX_ADDR_P1, rx_addr_p1_def, 5);
 8001022:	f107 0210 	add.w	r2, r7, #16
 8001026:	2305      	movs	r3, #5
 8001028:	210b      	movs	r1, #11
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff0d 	bl	8000e4a <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_ADDR_P2, 0xC3);
 8001030:	22c3      	movs	r2, #195	; 0xc3
 8001032:	210c      	movs	r1, #12
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fedd 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P3, 0xC4);
 800103a:	22c4      	movs	r2, #196	; 0xc4
 800103c:	210d      	movs	r1, #13
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff fed8 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P4, 0xC5);
 8001044:	22c5      	movs	r2, #197	; 0xc5
 8001046:	210e      	movs	r1, #14
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff fed3 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P5, 0xC6);
 800104e:	22c6      	movs	r2, #198	; 0xc6
 8001050:	210f      	movs	r1, #15
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fece 	bl	8000df4 <nrf24_writeReg>
		uint8_t tx_addr_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 8001058:	4a1f      	ldr	r2, [pc, #124]	; (80010d8 <nrf24_reset+0x178>)
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001062:	6018      	str	r0, [r3, #0]
 8001064:	3304      	adds	r3, #4
 8001066:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, TX_ADDR, tx_addr_def, 5);
 8001068:	f107 0208 	add.w	r2, r7, #8
 800106c:	2305      	movs	r3, #5
 800106e:	2110      	movs	r1, #16
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff feea 	bl	8000e4a <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_PW_P0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2111      	movs	r1, #17
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff feba 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P1, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2112      	movs	r1, #18
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff feb5 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P2, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2113      	movs	r1, #19
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff feb0 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P3, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2114      	movs	r1, #20
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff feab 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P4, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2115      	movs	r1, #21
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fea6 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2116      	movs	r1, #22
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff fea1 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 80010b2:	2211      	movs	r2, #17
 80010b4:	2117      	movs	r1, #23
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fe9c 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, DYNPD, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	211c      	movs	r1, #28
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff fe97 	bl	8000df4 <nrf24_writeReg>
		nrf24_writeReg(node, FEATURE, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	211d      	movs	r1, #29
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fe92 	bl	8000df4 <nrf24_writeReg>
}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	080057b4 	.word	0x080057b4
 80010dc:	080057bc 	.word	0x080057bc

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_MspInit+0x54>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	4a11      	ldr	r2, [pc, #68]	; (8001134 <HAL_MspInit+0x54>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	; 0x44
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_MspInit+0x54>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_MspInit+0x54>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <HAL_MspInit+0x54>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <HAL_MspInit+0x54>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	210f      	movs	r1, #15
 8001122:	f06f 0001 	mvn.w	r0, #1
 8001126:	f001 f86a 	bl	80021fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800

08001138 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a33      	ldr	r2, [pc, #204]	; (8001224 <HAL_ADC_MspInit+0xec>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d15f      	bne.n	800121a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b32      	ldr	r3, [pc, #200]	; (8001228 <HAL_ADC_MspInit+0xf0>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a31      	ldr	r2, [pc, #196]	; (8001228 <HAL_ADC_MspInit+0xf0>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <HAL_ADC_MspInit+0xf0>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <HAL_ADC_MspInit+0xf0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a2a      	ldr	r2, [pc, #168]	; (8001228 <HAL_ADC_MspInit+0xf0>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b28      	ldr	r3, [pc, #160]	; (8001228 <HAL_ADC_MspInit+0xf0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001192:	2303      	movs	r3, #3
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001196:	2303      	movs	r3, #3
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4821      	ldr	r0, [pc, #132]	; (800122c <HAL_ADC_MspInit+0xf4>)
 80011a6:	f001 fbd1 	bl	800294c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <HAL_ADC_MspInit+0xf8>)
 80011ac:	4a21      	ldr	r2, [pc, #132]	; (8001234 <HAL_ADC_MspInit+0xfc>)
 80011ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <HAL_ADC_MspInit+0xf8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <HAL_ADC_MspInit+0xf8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <HAL_ADC_MspInit+0xf8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_ADC_MspInit+0xf8>)
 80011c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_ADC_MspInit+0xf8>)
 80011cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <HAL_ADC_MspInit+0xf8>)
 80011d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_ADC_MspInit+0xf8>)
 80011dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <HAL_ADC_MspInit+0xf8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_ADC_MspInit+0xf8>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ee:	4810      	ldr	r0, [pc, #64]	; (8001230 <HAL_ADC_MspInit+0xf8>)
 80011f0:	f001 f83c 	bl	800226c <HAL_DMA_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80011fa:	f7ff fbf9 	bl	80009f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <HAL_ADC_MspInit+0xf8>)
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_ADC_MspInit+0xf8>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2105      	movs	r1, #5
 800120e:	2012      	movs	r0, #18
 8001210:	f000 fff5 	bl	80021fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001214:	2012      	movs	r0, #18
 8001216:	f001 f80e 	bl	8002236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40012000 	.word	0x40012000
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000
 8001230:	20000414 	.word	0x20000414
 8001234:	40026410 	.word	0x40026410

08001238 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_SPI_MspInit+0x84>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d12c      	bne.n	80012b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001292:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012a4:	2305      	movs	r3, #5
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_SPI_MspInit+0x8c>)
 80012b0:	f001 fb4c 	bl	800294c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40003800 	.word	0x40003800
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020400 	.word	0x40020400

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <NMI_Handler+0x4>

080012ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <HardFault_Handler+0x4>

080012d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <MemManage_Handler+0x4>

080012da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f8:	f000 f8ac 	bl	8001454 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012fc:	f003 fcb8 	bl	8004c70 <xTaskGetSchedulerState>
 8001300:	4603      	mov	r3, r0
 8001302:	2b01      	cmp	r3, #1
 8001304:	d001      	beq.n	800130a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001306:	f003 fef7 	bl	80050f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <ADC_IRQHandler+0x10>)
 8001316:	f000 f9bf 	bl	8001698 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200003cc 	.word	0x200003cc

08001324 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <DMA2_Stream0_IRQHandler+0x10>)
 800132a:	f001 f8a5 	bl	8002478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000414 	.word	0x20000414

08001338 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <SystemInit+0x20>)
 800133e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <SystemInit+0x20>)
 8001344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001394 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001362:	490e      	ldr	r1, [pc, #56]	; (800139c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001368:	e002      	b.n	8001370 <LoopCopyDataInit>

0800136a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800136c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136e:	3304      	adds	r3, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001374:	d3f9      	bcc.n	800136a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001378:	4c0b      	ldr	r4, [pc, #44]	; (80013a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800137c:	e001      	b.n	8001382 <LoopFillZerobss>

0800137e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001380:	3204      	adds	r2, #4

08001382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001384:	d3fb      	bcc.n	800137e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001386:	f7ff ffd7 	bl	8001338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138a:	f004 f8ef 	bl	800556c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff f8c3 	bl	8000518 <main>
  bx  lr    
 8001392:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 80013a0:	08005854 	.word	0x08005854
  ldr r2, =_sbss
 80013a4:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 80013a8:	20004258 	.word	0x20004258

080013ac <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <DMA1_Stream0_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <HAL_Init+0x40>)
 80013ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <HAL_Init+0x40>)
 80013c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_Init+0x40>)
 80013d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 ff05 	bl	80021e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013de:	200f      	movs	r0, #15
 80013e0:	f000 f808 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e4:	f7ff fe7c 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023c00 	.word	0x40023c00

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x54>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x58>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 ff1d 	bl	8002252 <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 fee5 	bl	80021fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <HAL_InitTick+0x5c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000080 	.word	0x20000080
 800144c:	20000088 	.word	0x20000088
 8001450:	20000084 	.word	0x20000084

08001454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000088 	.word	0x20000088
 8001478:	200004f8 	.word	0x200004f8

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	200004f8 	.word	0x200004f8

08001494 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e033      	b.n	8001512 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fe40 	bl	8001138 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d118      	bne.n	8001504 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014da:	f023 0302 	bic.w	r3, r3, #2
 80014de:	f043 0202 	orr.w	r2, r3, #2
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 fc26 	bl	8001d38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f023 0303 	bic.w	r3, r3, #3
 80014fa:	f043 0201 	orr.w	r2, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	; 0x40
 8001502:	e001      	b.n	8001508 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800152e:	2b01      	cmp	r3, #1
 8001530:	d101      	bne.n	8001536 <HAL_ADC_Start_IT+0x1a>
 8001532:	2302      	movs	r3, #2
 8001534:	e0a1      	b.n	800167a <HAL_ADC_Start_IT+0x15e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b01      	cmp	r3, #1
 800154a:	d018      	beq.n	800157e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0201 	orr.w	r2, r2, #1
 800155a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800155c:	4b4a      	ldr	r3, [pc, #296]	; (8001688 <HAL_ADC_Start_IT+0x16c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a4a      	ldr	r2, [pc, #296]	; (800168c <HAL_ADC_Start_IT+0x170>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	0c9a      	lsrs	r2, r3, #18
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001570:	e002      	b.n	8001578 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3b01      	subs	r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f9      	bne.n	8001572 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b01      	cmp	r3, #1
 800158a:	d169      	bne.n	8001660 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d007      	beq.n	80015be <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ca:	d106      	bne.n	80015da <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d0:	f023 0206 	bic.w	r2, r3, #6
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	645a      	str	r2, [r3, #68]	; 0x44
 80015d8:	e002      	b.n	80015e0 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <HAL_ADC_Start_IT+0x174>)
 80015ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015f4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001604:	f043 0320 	orr.w	r3, r3, #32
 8001608:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10f      	bne.n	8001636 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d129      	bne.n	8001678 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	e020      	b.n	8001678 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a16      	ldr	r2, [pc, #88]	; (8001694 <HAL_ADC_Start_IT+0x178>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d11b      	bne.n	8001678 <HAL_ADC_Start_IT+0x15c>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d114      	bne.n	8001678 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	e00b      	b.n	8001678 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f043 0210 	orr.w	r2, r3, #16
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001670:	f043 0201 	orr.w	r2, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000080 	.word	0x20000080
 800168c:	431bde83 	.word	0x431bde83
 8001690:	40012300 	.word	0x40012300
 8001694:	40012000 	.word	0x40012000

08001698 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f003 0320 	and.w	r3, r3, #32
 80016c6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d049      	beq.n	8001762 <HAL_ADC_IRQHandler+0xca>
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d046      	beq.n	8001762 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d105      	bne.n	80016ec <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d12b      	bne.n	8001752 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d127      	bne.n	8001752 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800171a:	2b00      	cmp	r3, #0
 800171c:	d119      	bne.n	8001752 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0220 	bic.w	r2, r2, #32
 800172c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d105      	bne.n	8001752 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f043 0201 	orr.w	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff f8de 	bl	8000914 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f06f 0212 	mvn.w	r2, #18
 8001760:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001770:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d057      	beq.n	8001828 <HAL_ADC_IRQHandler+0x190>
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d054      	beq.n	8001828 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b00      	cmp	r3, #0
 8001788:	d105      	bne.n	8001796 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d139      	bne.n	8001818 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d12b      	bne.n	8001818 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d124      	bne.n	8001818 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d11d      	bne.n	8001818 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d119      	bne.n	8001818 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 fc0b 	bl	8002034 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f06f 020c 	mvn.w	r2, #12
 8001826:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001836:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d017      	beq.n	800186e <HAL_ADC_IRQHandler+0x1d6>
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d014      	beq.n	800186e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d10d      	bne.n	800186e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f924 	bl	8001aac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f06f 0201 	mvn.w	r2, #1
 800186c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f003 0320 	and.w	r3, r3, #32
 8001874:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800187c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d015      	beq.n	80018b0 <HAL_ADC_IRQHandler+0x218>
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d012      	beq.n	80018b0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f043 0202 	orr.w	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f06f 0220 	mvn.w	r2, #32
 800189e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f90d 	bl	8001ac0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f06f 0220 	mvn.w	r2, #32
 80018ae:	601a      	str	r2, [r3, #0]
  }
}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_Start_DMA+0x1e>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e0ce      	b.n	8001a74 <HAL_ADC_Start_DMA+0x1bc>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d018      	beq.n	800191e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018fc:	4b5f      	ldr	r3, [pc, #380]	; (8001a7c <HAL_ADC_Start_DMA+0x1c4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a5f      	ldr	r2, [pc, #380]	; (8001a80 <HAL_ADC_Start_DMA+0x1c8>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	0c9a      	lsrs	r2, r3, #18
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001910:	e002      	b.n	8001918 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	3b01      	subs	r3, #1
 8001916:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f9      	bne.n	8001912 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800192c:	d107      	bne.n	800193e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800193c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b01      	cmp	r3, #1
 800194a:	f040 8086 	bne.w	8001a5a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196c:	2b00      	cmp	r3, #0
 800196e:	d007      	beq.n	8001980 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001978:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800198c:	d106      	bne.n	800199c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f023 0206 	bic.w	r2, r3, #6
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	645a      	str	r2, [r3, #68]	; 0x44
 800199a:	e002      	b.n	80019a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019aa:	4b36      	ldr	r3, [pc, #216]	; (8001a84 <HAL_ADC_Start_DMA+0x1cc>)
 80019ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b2:	4a35      	ldr	r2, [pc, #212]	; (8001a88 <HAL_ADC_Start_DMA+0x1d0>)
 80019b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ba:	4a34      	ldr	r2, [pc, #208]	; (8001a8c <HAL_ADC_Start_DMA+0x1d4>)
 80019bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c2:	4a33      	ldr	r2, [pc, #204]	; (8001a90 <HAL_ADC_Start_DMA+0x1d8>)
 80019c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80019de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	334c      	adds	r3, #76	; 0x4c
 80019fa:	4619      	mov	r1, r3
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f000 fce2 	bl	80023c8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 031f 	and.w	r3, r3, #31
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10f      	bne.n	8001a30 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d129      	bne.n	8001a72 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	e020      	b.n	8001a72 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <HAL_ADC_Start_DMA+0x1dc>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d11b      	bne.n	8001a72 <HAL_ADC_Start_DMA+0x1ba>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d114      	bne.n	8001a72 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	e00b      	b.n	8001a72 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f043 0210 	orr.w	r2, r3, #16
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f043 0201 	orr.w	r2, r3, #1
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000080 	.word	0x20000080
 8001a80:	431bde83 	.word	0x431bde83
 8001a84:	40012300 	.word	0x40012300
 8001a88:	08001f31 	.word	0x08001f31
 8001a8c:	08001feb 	.word	0x08001feb
 8001a90:	08002007 	.word	0x08002007
 8001a94:	40012000 	.word	0x40012000

08001a98 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1c>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e113      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x244>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b09      	cmp	r3, #9
 8001afe:	d925      	bls.n	8001b4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68d9      	ldr	r1, [r3, #12]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	3b1e      	subs	r3, #30
 8001b16:	2207      	movs	r2, #7
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43da      	mvns	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	400a      	ands	r2, r1
 8001b24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68d9      	ldr	r1, [r3, #12]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	4618      	mov	r0, r3
 8001b38:	4603      	mov	r3, r0
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4403      	add	r3, r0
 8001b3e:	3b1e      	subs	r3, #30
 8001b40:	409a      	lsls	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	e022      	b.n	8001b92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6919      	ldr	r1, [r3, #16]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	2207      	movs	r2, #7
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6919      	ldr	r1, [r3, #16]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	4603      	mov	r3, r0
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4403      	add	r3, r0
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d824      	bhi.n	8001be4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	3b05      	subs	r3, #5
 8001bac:	221f      	movs	r2, #31
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	400a      	ands	r2, r1
 8001bba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3b05      	subs	r3, #5
 8001bd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	635a      	str	r2, [r3, #52]	; 0x34
 8001be2:	e04c      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b0c      	cmp	r3, #12
 8001bea:	d824      	bhi.n	8001c36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3b23      	subs	r3, #35	; 0x23
 8001bfe:	221f      	movs	r2, #31
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43da      	mvns	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	3b23      	subs	r3, #35	; 0x23
 8001c28:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
 8001c34:	e023      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	3b41      	subs	r3, #65	; 0x41
 8001c48:	221f      	movs	r2, #31
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	400a      	ands	r2, r1
 8001c56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b41      	subs	r3, #65	; 0x41
 8001c72:	fa00 f203 	lsl.w	r2, r0, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <HAL_ADC_ConfigChannel+0x250>)
 8001c80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a28      	ldr	r2, [pc, #160]	; (8001d28 <HAL_ADC_ConfigChannel+0x254>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d10f      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x1d8>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b12      	cmp	r3, #18
 8001c92:	d10b      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <HAL_ADC_ConfigChannel+0x254>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d12b      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x23a>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1c      	ldr	r2, [pc, #112]	; (8001d2c <HAL_ADC_ConfigChannel+0x258>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d003      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0x1f4>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b11      	cmp	r3, #17
 8001cc6:	d122      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a11      	ldr	r2, [pc, #68]	; (8001d2c <HAL_ADC_ConfigChannel+0x258>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d111      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_ADC_ConfigChannel+0x25c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a11      	ldr	r2, [pc, #68]	; (8001d34 <HAL_ADC_ConfigChannel+0x260>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	0c9a      	lsrs	r2, r3, #18
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d00:	e002      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f9      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	40012300 	.word	0x40012300
 8001d28:	40012000 	.word	0x40012000
 8001d2c:	10000012 	.word	0x10000012
 8001d30:	20000080 	.word	0x20000080
 8001d34:	431bde83 	.word	0x431bde83

08001d38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d40:	4b79      	ldr	r3, [pc, #484]	; (8001f28 <ADC_Init+0x1f0>)
 8001d42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6859      	ldr	r1, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	021a      	lsls	r2, r3, #8
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6899      	ldr	r1, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	4a58      	ldr	r2, [pc, #352]	; (8001f2c <ADC_Init+0x1f4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d022      	beq.n	8001e16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6899      	ldr	r1, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6899      	ldr	r1, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	e00f      	b.n	8001e36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0202 	bic.w	r2, r2, #2
 8001e44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6899      	ldr	r1, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7e1b      	ldrb	r3, [r3, #24]
 8001e50:	005a      	lsls	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01b      	beq.n	8001e9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6859      	ldr	r1, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	035a      	lsls	r2, r3, #13
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	e007      	b.n	8001eac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eaa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	051a      	lsls	r2, r3, #20
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ee0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6899      	ldr	r1, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eee:	025a      	lsls	r2, r3, #9
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6899      	ldr	r1, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	029a      	lsls	r2, r3, #10
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	609a      	str	r2, [r3, #8]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40012300 	.word	0x40012300
 8001f2c:	0f000001 	.word	0x0f000001

08001f30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d13c      	bne.n	8001fc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d12b      	bne.n	8001fbc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d127      	bne.n	8001fbc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d006      	beq.n	8001f88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d119      	bne.n	8001fbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0220 	bic.w	r2, r2, #32
 8001f96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f043 0201 	orr.w	r2, r3, #1
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f7fe fca9 	bl	8000914 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fc2:	e00e      	b.n	8001fe2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f7ff fd75 	bl	8001ac0 <HAL_ADC_ErrorCallback>
}
 8001fd6:	e004      	b.n	8001fe2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	4798      	blx	r3
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f7ff fd4d 	bl	8001a98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002012:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2240      	movs	r2, #64	; 0x40
 8002018:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f043 0204 	orr.w	r2, r3, #4
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f7ff fd4a 	bl	8001ac0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002064:	4013      	ands	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207a:	4a04      	ldr	r2, [pc, #16]	; (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	60d3      	str	r3, [r2, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0307 	and.w	r3, r3, #7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	db0b      	blt.n	80020d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	4907      	ldr	r1, [pc, #28]	; (80020e4 <__NVIC_EnableIRQ+0x38>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	2001      	movs	r0, #1
 80020ce:	fa00 f202 	lsl.w	r2, r0, r2
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000e100 	.word	0xe000e100

080020e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	db0a      	blt.n	8002112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	490c      	ldr	r1, [pc, #48]	; (8002134 <__NVIC_SetPriority+0x4c>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	440b      	add	r3, r1
 800210c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002110:	e00a      	b.n	8002128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4908      	ldr	r1, [pc, #32]	; (8002138 <__NVIC_SetPriority+0x50>)
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	3b04      	subs	r3, #4
 8002120:	0112      	lsls	r2, r2, #4
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	440b      	add	r3, r1
 8002126:	761a      	strb	r2, [r3, #24]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000e100 	.word	0xe000e100
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f1c3 0307 	rsb	r3, r3, #7
 8002156:	2b04      	cmp	r3, #4
 8002158:	bf28      	it	cs
 800215a:	2304      	movcs	r3, #4
 800215c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3304      	adds	r3, #4
 8002162:	2b06      	cmp	r3, #6
 8002164:	d902      	bls.n	800216c <NVIC_EncodePriority+0x30>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3b03      	subs	r3, #3
 800216a:	e000      	b.n	800216e <NVIC_EncodePriority+0x32>
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	401a      	ands	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43d9      	mvns	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	4313      	orrs	r3, r2
         );
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b4:	d301      	bcc.n	80021ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b6:	2301      	movs	r3, #1
 80021b8:	e00f      	b.n	80021da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <SysTick_Config+0x40>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3b01      	subs	r3, #1
 80021c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c2:	210f      	movs	r1, #15
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295
 80021c8:	f7ff ff8e 	bl	80020e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <SysTick_Config+0x40>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <SysTick_Config+0x40>)
 80021d4:	2207      	movs	r2, #7
 80021d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	e000e010 	.word	0xe000e010

080021e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff29 	bl	8002048 <__NVIC_SetPriorityGrouping>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002210:	f7ff ff3e 	bl	8002090 <__NVIC_GetPriorityGrouping>
 8002214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	6978      	ldr	r0, [r7, #20]
 800221c:	f7ff ff8e 	bl	800213c <NVIC_EncodePriority>
 8002220:	4602      	mov	r2, r0
 8002222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff5d 	bl	80020e8 <__NVIC_SetPriority>
}
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff31 	bl	80020ac <__NVIC_EnableIRQ>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffa2 	bl	80021a4 <SysTick_Config>
 8002260:	4603      	mov	r3, r0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7ff f900 	bl	800147c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e099      	b.n	80023bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a8:	e00f      	b.n	80022ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022aa:	f7ff f8e7 	bl	800147c <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	d908      	bls.n	80022ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2203      	movs	r2, #3
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e078      	b.n	80023bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e8      	bne.n	80022aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4b38      	ldr	r3, [pc, #224]	; (80023c4 <HAL_DMA_Init+0x158>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002302:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800230e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	2b04      	cmp	r3, #4
 8002322:	d107      	bne.n	8002334 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	4313      	orrs	r3, r2
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f023 0307 	bic.w	r3, r3, #7
 800234a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	2b04      	cmp	r3, #4
 800235c:	d117      	bne.n	800238e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00e      	beq.n	800238e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fa6f 	bl	8002854 <DMA_CheckFifoParam>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2240      	movs	r2, #64	; 0x40
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800238a:	2301      	movs	r3, #1
 800238c:	e016      	b.n	80023bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fa26 	bl	80027e8 <DMA_CalcBaseAndBitshift>
 800239c:	4603      	mov	r3, r0
 800239e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	223f      	movs	r2, #63	; 0x3f
 80023a6:	409a      	lsls	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	f010803f 	.word	0xf010803f

080023c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_DMA_Start_IT+0x26>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e040      	b.n	8002470 <HAL_DMA_Start_IT+0xa8>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d12f      	bne.n	8002462 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2202      	movs	r2, #2
 8002406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f9b8 	bl	800278c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	223f      	movs	r2, #63	; 0x3f
 8002422:	409a      	lsls	r2, r3
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0216 	orr.w	r2, r2, #22
 8002436:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d007      	beq.n	8002450 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0208 	orr.w	r2, r2, #8
 800244e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	e005      	b.n	800246e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800246a:	2302      	movs	r3, #2
 800246c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800246e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002484:	4b8e      	ldr	r3, [pc, #568]	; (80026c0 <HAL_DMA_IRQHandler+0x248>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a8e      	ldr	r2, [pc, #568]	; (80026c4 <HAL_DMA_IRQHandler+0x24c>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	0a9b      	lsrs	r3, r3, #10
 8002490:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	2208      	movs	r2, #8
 80024a4:	409a      	lsls	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01a      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d013      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0204 	bic.w	r2, r2, #4
 80024ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d0:	2208      	movs	r2, #8
 80024d2:	409a      	lsls	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	2201      	movs	r2, #1
 80024ea:	409a      	lsls	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d012      	beq.n	800251a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002506:	2201      	movs	r2, #1
 8002508:	409a      	lsls	r2, r3
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f043 0202 	orr.w	r2, r3, #2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	2204      	movs	r2, #4
 8002520:	409a      	lsls	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d012      	beq.n	8002550 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253c:	2204      	movs	r2, #4
 800253e:	409a      	lsls	r2, r3
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	f043 0204 	orr.w	r2, r3, #4
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	2210      	movs	r2, #16
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d043      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d03c      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	2210      	movs	r2, #16
 8002574:	409a      	lsls	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d018      	beq.n	80025ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d108      	bne.n	80025a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d024      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
 80025a6:	e01f      	b.n	80025e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01b      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
 80025b8:	e016      	b.n	80025e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d107      	bne.n	80025d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0208 	bic.w	r2, r2, #8
 80025d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	2220      	movs	r2, #32
 80025ee:	409a      	lsls	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 808f 	beq.w	8002718 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8087 	beq.w	8002718 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260e:	2220      	movs	r2, #32
 8002610:	409a      	lsls	r2, r3
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b05      	cmp	r3, #5
 8002620:	d136      	bne.n	8002690 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0216 	bic.w	r2, r2, #22
 8002630:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002640:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <HAL_DMA_IRQHandler+0x1da>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0208 	bic.w	r2, r2, #8
 8002660:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	223f      	movs	r2, #63	; 0x3f
 8002668:	409a      	lsls	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002682:	2b00      	cmp	r3, #0
 8002684:	d07e      	beq.n	8002784 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
        }
        return;
 800268e:	e079      	b.n	8002784 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01d      	beq.n	80026da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10d      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d031      	beq.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	4798      	blx	r3
 80026bc:	e02c      	b.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
 80026be:	bf00      	nop
 80026c0:	20000080 	.word	0x20000080
 80026c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d023      	beq.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
 80026d8:	e01e      	b.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10f      	bne.n	8002708 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0210 	bic.w	r2, r2, #16
 80026f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271c:	2b00      	cmp	r3, #0
 800271e:	d032      	beq.n	8002786 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d022      	beq.n	8002772 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2205      	movs	r2, #5
 8002730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	3301      	adds	r3, #1
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	429a      	cmp	r2, r3
 800274e:	d307      	bcc.n	8002760 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f2      	bne.n	8002744 <HAL_DMA_IRQHandler+0x2cc>
 800275e:	e000      	b.n	8002762 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002760:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
 8002782:	e000      	b.n	8002786 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002784:	bf00      	nop
    }
  }
}
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b40      	cmp	r3, #64	; 0x40
 80027b8:	d108      	bne.n	80027cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027ca:	e007      	b.n	80027dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	60da      	str	r2, [r3, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	3b10      	subs	r3, #16
 80027f8:	4a14      	ldr	r2, [pc, #80]	; (800284c <DMA_CalcBaseAndBitshift+0x64>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002802:	4a13      	ldr	r2, [pc, #76]	; (8002850 <DMA_CalcBaseAndBitshift+0x68>)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d909      	bls.n	800282a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800281e:	f023 0303 	bic.w	r3, r3, #3
 8002822:	1d1a      	adds	r2, r3, #4
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	659a      	str	r2, [r3, #88]	; 0x58
 8002828:	e007      	b.n	800283a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002832:	f023 0303 	bic.w	r3, r3, #3
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	aaaaaaab 	.word	0xaaaaaaab
 8002850:	080057dc 	.word	0x080057dc

08002854 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d11f      	bne.n	80028ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d856      	bhi.n	8002922 <DMA_CheckFifoParam+0xce>
 8002874:	a201      	add	r2, pc, #4	; (adr r2, 800287c <DMA_CheckFifoParam+0x28>)
 8002876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287a:	bf00      	nop
 800287c:	0800288d 	.word	0x0800288d
 8002880:	0800289f 	.word	0x0800289f
 8002884:	0800288d 	.word	0x0800288d
 8002888:	08002923 	.word	0x08002923
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d046      	beq.n	8002926 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289c:	e043      	b.n	8002926 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a6:	d140      	bne.n	800292a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ac:	e03d      	b.n	800292a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b6:	d121      	bne.n	80028fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d837      	bhi.n	800292e <DMA_CheckFifoParam+0xda>
 80028be:	a201      	add	r2, pc, #4	; (adr r2, 80028c4 <DMA_CheckFifoParam+0x70>)
 80028c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c4:	080028d5 	.word	0x080028d5
 80028c8:	080028db 	.word	0x080028db
 80028cc:	080028d5 	.word	0x080028d5
 80028d0:	080028ed 	.word	0x080028ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
      break;
 80028d8:	e030      	b.n	800293c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d025      	beq.n	8002932 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ea:	e022      	b.n	8002932 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028f4:	d11f      	bne.n	8002936 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028fa:	e01c      	b.n	8002936 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d903      	bls.n	800290a <DMA_CheckFifoParam+0xb6>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b03      	cmp	r3, #3
 8002906:	d003      	beq.n	8002910 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002908:	e018      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
      break;
 800290e:	e015      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00e      	beq.n	800293a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
      break;
 8002920:	e00b      	b.n	800293a <DMA_CheckFifoParam+0xe6>
      break;
 8002922:	bf00      	nop
 8002924:	e00a      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 8002926:	bf00      	nop
 8002928:	e008      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 800292a:	bf00      	nop
 800292c:	e006      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 800292e:	bf00      	nop
 8002930:	e004      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 8002932:	bf00      	nop
 8002934:	e002      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;   
 8002936:	bf00      	nop
 8002938:	e000      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 800293a:	bf00      	nop
    }
  } 
  
  return status; 
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop

0800294c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800294c:	b480      	push	{r7}
 800294e:	b089      	sub	sp, #36	; 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	e159      	b.n	8002c1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002968:	2201      	movs	r2, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	429a      	cmp	r2, r3
 8002982:	f040 8148 	bne.w	8002c16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b01      	cmp	r3, #1
 8002990:	d005      	beq.n	800299e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800299a:	2b02      	cmp	r3, #2
 800299c:	d130      	bne.n	8002a00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	2203      	movs	r2, #3
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d4:	2201      	movs	r2, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 0201 	and.w	r2, r3, #1
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d017      	beq.n	8002a3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d123      	bne.n	8002a90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	08da      	lsrs	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3208      	adds	r2, #8
 8002a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	220f      	movs	r2, #15
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	08da      	lsrs	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3208      	adds	r2, #8
 8002a8a:	69b9      	ldr	r1, [r7, #24]
 8002a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0203 	and.w	r2, r3, #3
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80a2 	beq.w	8002c16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	4b57      	ldr	r3, [pc, #348]	; (8002c34 <HAL_GPIO_Init+0x2e8>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	4a56      	ldr	r2, [pc, #344]	; (8002c34 <HAL_GPIO_Init+0x2e8>)
 8002adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae2:	4b54      	ldr	r3, [pc, #336]	; (8002c34 <HAL_GPIO_Init+0x2e8>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aee:	4a52      	ldr	r2, [pc, #328]	; (8002c38 <HAL_GPIO_Init+0x2ec>)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	3302      	adds	r3, #2
 8002af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	220f      	movs	r2, #15
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a49      	ldr	r2, [pc, #292]	; (8002c3c <HAL_GPIO_Init+0x2f0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d019      	beq.n	8002b4e <HAL_GPIO_Init+0x202>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a48      	ldr	r2, [pc, #288]	; (8002c40 <HAL_GPIO_Init+0x2f4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d013      	beq.n	8002b4a <HAL_GPIO_Init+0x1fe>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a47      	ldr	r2, [pc, #284]	; (8002c44 <HAL_GPIO_Init+0x2f8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00d      	beq.n	8002b46 <HAL_GPIO_Init+0x1fa>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a46      	ldr	r2, [pc, #280]	; (8002c48 <HAL_GPIO_Init+0x2fc>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d007      	beq.n	8002b42 <HAL_GPIO_Init+0x1f6>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a45      	ldr	r2, [pc, #276]	; (8002c4c <HAL_GPIO_Init+0x300>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d101      	bne.n	8002b3e <HAL_GPIO_Init+0x1f2>
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	e008      	b.n	8002b50 <HAL_GPIO_Init+0x204>
 8002b3e:	2307      	movs	r3, #7
 8002b40:	e006      	b.n	8002b50 <HAL_GPIO_Init+0x204>
 8002b42:	2303      	movs	r3, #3
 8002b44:	e004      	b.n	8002b50 <HAL_GPIO_Init+0x204>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e002      	b.n	8002b50 <HAL_GPIO_Init+0x204>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_GPIO_Init+0x204>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	f002 0203 	and.w	r2, r2, #3
 8002b56:	0092      	lsls	r2, r2, #2
 8002b58:	4093      	lsls	r3, r2
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b60:	4935      	ldr	r1, [pc, #212]	; (8002c38 <HAL_GPIO_Init+0x2ec>)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	089b      	lsrs	r3, r3, #2
 8002b66:	3302      	adds	r3, #2
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b6e:	4b38      	ldr	r3, [pc, #224]	; (8002c50 <HAL_GPIO_Init+0x304>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b92:	4a2f      	ldr	r2, [pc, #188]	; (8002c50 <HAL_GPIO_Init+0x304>)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b98:	4b2d      	ldr	r3, [pc, #180]	; (8002c50 <HAL_GPIO_Init+0x304>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bbc:	4a24      	ldr	r2, [pc, #144]	; (8002c50 <HAL_GPIO_Init+0x304>)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bc2:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <HAL_GPIO_Init+0x304>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002be6:	4a1a      	ldr	r2, [pc, #104]	; (8002c50 <HAL_GPIO_Init+0x304>)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bec:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <HAL_GPIO_Init+0x304>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c10:	4a0f      	ldr	r2, [pc, #60]	; (8002c50 <HAL_GPIO_Init+0x304>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	2b0f      	cmp	r3, #15
 8002c20:	f67f aea2 	bls.w	8002968 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40013800 	.word	0x40013800
 8002c3c:	40020000 	.word	0x40020000
 8002c40:	40020400 	.word	0x40020400
 8002c44:	40020800 	.word	0x40020800
 8002c48:	40020c00 	.word	0x40020c00
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40013c00 	.word	0x40013c00

08002c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	807b      	strh	r3, [r7, #2]
 8002c60:	4613      	mov	r3, r2
 8002c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c64:	787b      	ldrb	r3, [r7, #1]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c6a:	887a      	ldrh	r2, [r7, #2]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c70:	e003      	b.n	8002c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c72:	887b      	ldrh	r3, [r7, #2]
 8002c74:	041a      	lsls	r2, r3, #16
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	619a      	str	r2, [r3, #24]
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
	...

08002c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e267      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d075      	beq.n	8002d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ca6:	4b88      	ldr	r3, [pc, #544]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d00c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb2:	4b85      	ldr	r3, [pc, #532]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d112      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cbe:	4b82      	ldr	r3, [pc, #520]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cca:	d10b      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	4b7e      	ldr	r3, [pc, #504]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d05b      	beq.n	8002d90 <HAL_RCC_OscConfig+0x108>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d157      	bne.n	8002d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e242      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cec:	d106      	bne.n	8002cfc <HAL_RCC_OscConfig+0x74>
 8002cee:	4b76      	ldr	r3, [pc, #472]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a75      	ldr	r2, [pc, #468]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e01d      	b.n	8002d38 <HAL_RCC_OscConfig+0xb0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x98>
 8002d06:	4b70      	ldr	r3, [pc, #448]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a6f      	ldr	r2, [pc, #444]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	4b6d      	ldr	r3, [pc, #436]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6c      	ldr	r2, [pc, #432]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e00b      	b.n	8002d38 <HAL_RCC_OscConfig+0xb0>
 8002d20:	4b69      	ldr	r3, [pc, #420]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a68      	ldr	r2, [pc, #416]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b66      	ldr	r3, [pc, #408]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a65      	ldr	r2, [pc, #404]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d013      	beq.n	8002d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fe fb9c 	bl	800147c <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d48:	f7fe fb98 	bl	800147c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e207      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	4b5b      	ldr	r3, [pc, #364]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0xc0>
 8002d66:	e014      	b.n	8002d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7fe fb88 	bl	800147c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d70:	f7fe fb84 	bl	800147c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e1f3      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	4b51      	ldr	r3, [pc, #324]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0xe8>
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d063      	beq.n	8002e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d9e:	4b4a      	ldr	r3, [pc, #296]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002daa:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d11c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002db6:	4b44      	ldr	r3, [pc, #272]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d116      	bne.n	8002df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc2:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <HAL_RCC_OscConfig+0x152>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e1c7      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dda:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4937      	ldr	r1, [pc, #220]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dee:	e03a      	b.n	8002e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d020      	beq.n	8002e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df8:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <HAL_RCC_OscConfig+0x244>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfe:	f7fe fb3d 	bl	800147c <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e06:	f7fe fb39 	bl	800147c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e1a8      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e18:	4b2b      	ldr	r3, [pc, #172]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e24:	4b28      	ldr	r3, [pc, #160]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4925      	ldr	r1, [pc, #148]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	600b      	str	r3, [r1, #0]
 8002e38:	e015      	b.n	8002e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCC_OscConfig+0x244>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe fb1c 	bl	800147c <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e48:	f7fe fb18 	bl	800147c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e187      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d036      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d016      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <HAL_RCC_OscConfig+0x248>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fe fafc 	bl	800147c <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e88:	f7fe faf8 	bl	800147c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e167      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x200>
 8002ea6:	e01b      	b.n	8002ee0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea8:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_RCC_OscConfig+0x248>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fe fae5 	bl	800147c <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb4:	e00e      	b.n	8002ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb6:	f7fe fae1 	bl	800147c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d907      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e150      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	42470000 	.word	0x42470000
 8002ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed4:	4b88      	ldr	r3, [pc, #544]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1ea      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8097 	beq.w	800301c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef2:	4b81      	ldr	r3, [pc, #516]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10f      	bne.n	8002f1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	4b7d      	ldr	r3, [pc, #500]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a7c      	ldr	r2, [pc, #496]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	4b7a      	ldr	r3, [pc, #488]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1e:	4b77      	ldr	r3, [pc, #476]	; (80030fc <HAL_RCC_OscConfig+0x474>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d118      	bne.n	8002f5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2a:	4b74      	ldr	r3, [pc, #464]	; (80030fc <HAL_RCC_OscConfig+0x474>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a73      	ldr	r2, [pc, #460]	; (80030fc <HAL_RCC_OscConfig+0x474>)
 8002f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f36:	f7fe faa1 	bl	800147c <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3e:	f7fe fa9d 	bl	800147c <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e10c      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	4b6a      	ldr	r3, [pc, #424]	; (80030fc <HAL_RCC_OscConfig+0x474>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_OscConfig+0x2ea>
 8002f64:	4b64      	ldr	r3, [pc, #400]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4a63      	ldr	r2, [pc, #396]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f70:	e01c      	b.n	8002fac <HAL_RCC_OscConfig+0x324>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x30c>
 8002f7a:	4b5f      	ldr	r3, [pc, #380]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	4a5e      	ldr	r2, [pc, #376]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f80:	f043 0304 	orr.w	r3, r3, #4
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70
 8002f86:	4b5c      	ldr	r3, [pc, #368]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	4a5b      	ldr	r2, [pc, #364]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6713      	str	r3, [r2, #112]	; 0x70
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0x324>
 8002f94:	4b58      	ldr	r3, [pc, #352]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	4a57      	ldr	r2, [pc, #348]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f9a:	f023 0301 	bic.w	r3, r3, #1
 8002f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa0:	4b55      	ldr	r3, [pc, #340]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	4a54      	ldr	r2, [pc, #336]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	f023 0304 	bic.w	r3, r3, #4
 8002faa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d015      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fe fa62 	bl	800147c <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fa5e 	bl	800147c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e0cb      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd2:	4b49      	ldr	r3, [pc, #292]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0ee      	beq.n	8002fbc <HAL_RCC_OscConfig+0x334>
 8002fde:	e014      	b.n	800300a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe0:	f7fe fa4c 	bl	800147c <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe8:	f7fe fa48 	bl	800147c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e0b5      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffe:	4b3e      	ldr	r3, [pc, #248]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1ee      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300a:	7dfb      	ldrb	r3, [r7, #23]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d105      	bne.n	800301c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003010:	4b39      	ldr	r3, [pc, #228]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	4a38      	ldr	r2, [pc, #224]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8003016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80a1 	beq.w	8003168 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003026:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b08      	cmp	r3, #8
 8003030:	d05c      	beq.n	80030ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d141      	bne.n	80030be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303a:	4b31      	ldr	r3, [pc, #196]	; (8003100 <HAL_RCC_OscConfig+0x478>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7fe fa1c 	bl	800147c <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003048:	f7fe fa18 	bl	800147c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e087      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69da      	ldr	r2, [r3, #28]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	019b      	lsls	r3, r3, #6
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	3b01      	subs	r3, #1
 8003080:	041b      	lsls	r3, r3, #16
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	491b      	ldr	r1, [pc, #108]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003090:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <HAL_RCC_OscConfig+0x478>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003096:	f7fe f9f1 	bl	800147c <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309e:	f7fe f9ed 	bl	800147c <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e05c      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b0:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x416>
 80030bc:	e054      	b.n	8003168 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <HAL_RCC_OscConfig+0x478>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fe f9da 	bl	800147c <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030cc:	f7fe f9d6 	bl	800147c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e045      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x444>
 80030ea:	e03d      	b.n	8003168 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e038      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40007000 	.word	0x40007000
 8003100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x4ec>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d028      	beq.n	8003164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d121      	bne.n	8003164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d11a      	bne.n	8003164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003134:	4013      	ands	r3, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800313a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800313c:	4293      	cmp	r3, r2
 800313e:	d111      	bne.n	8003164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	3b01      	subs	r3, #1
 800314e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d107      	bne.n	8003164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800

08003178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0cc      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800318c:	4b68      	ldr	r3, [pc, #416]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d90c      	bls.n	80031b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b65      	ldr	r3, [pc, #404]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b63      	ldr	r3, [pc, #396]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0b8      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031cc:	4b59      	ldr	r3, [pc, #356]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4a58      	ldr	r2, [pc, #352]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e4:	4b53      	ldr	r3, [pc, #332]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a52      	ldr	r2, [pc, #328]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f0:	4b50      	ldr	r3, [pc, #320]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	494d      	ldr	r1, [pc, #308]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d044      	beq.n	8003298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b47      	ldr	r3, [pc, #284]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d119      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e07f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d003      	beq.n	8003236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003232:	2b03      	cmp	r3, #3
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003236:	4b3f      	ldr	r3, [pc, #252]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e06f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003246:	4b3b      	ldr	r3, [pc, #236]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e067      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003256:	4b37      	ldr	r3, [pc, #220]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f023 0203 	bic.w	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4934      	ldr	r1, [pc, #208]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	4313      	orrs	r3, r2
 8003266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003268:	f7fe f908 	bl	800147c <HAL_GetTick>
 800326c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	e00a      	b.n	8003286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003270:	f7fe f904 	bl	800147c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	; 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e04f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	4b2b      	ldr	r3, [pc, #172]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 020c 	and.w	r2, r3, #12
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	429a      	cmp	r2, r3
 8003296:	d1eb      	bne.n	8003270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003298:	4b25      	ldr	r3, [pc, #148]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d20c      	bcs.n	80032c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b22      	ldr	r3, [pc, #136]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b20      	ldr	r3, [pc, #128]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e032      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4916      	ldr	r1, [pc, #88]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ea:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	490e      	ldr	r1, [pc, #56]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032fe:	f000 f821 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 8003302:	4602      	mov	r2, r0
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	490a      	ldr	r1, [pc, #40]	; (8003338 <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	5ccb      	ldrb	r3, [r1, r3]
 8003312:	fa22 f303 	lsr.w	r3, r2, r3
 8003316:	4a09      	ldr	r2, [pc, #36]	; (800333c <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_RCC_ClockConfig+0x1c8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe f868 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023c00 	.word	0x40023c00
 8003334:	40023800 	.word	0x40023800
 8003338:	080057cc 	.word	0x080057cc
 800333c:	20000080 	.word	0x20000080
 8003340:	20000084 	.word	0x20000084

08003344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003348:	b090      	sub	sp, #64	; 0x40
 800334a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	637b      	str	r3, [r7, #52]	; 0x34
 8003350:	2300      	movs	r3, #0
 8003352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003354:	2300      	movs	r3, #0
 8003356:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800335c:	4b59      	ldr	r3, [pc, #356]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 030c 	and.w	r3, r3, #12
 8003364:	2b08      	cmp	r3, #8
 8003366:	d00d      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0x40>
 8003368:	2b08      	cmp	r3, #8
 800336a:	f200 80a1 	bhi.w	80034b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x34>
 8003372:	2b04      	cmp	r3, #4
 8003374:	d003      	beq.n	800337e <HAL_RCC_GetSysClockFreq+0x3a>
 8003376:	e09b      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800337a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800337c:	e09b      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800337e:	4b53      	ldr	r3, [pc, #332]	; (80034cc <HAL_RCC_GetSysClockFreq+0x188>)
 8003380:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003382:	e098      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003384:	4b4f      	ldr	r3, [pc, #316]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800338e:	4b4d      	ldr	r3, [pc, #308]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d028      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339a:	4b4a      	ldr	r3, [pc, #296]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	099b      	lsrs	r3, r3, #6
 80033a0:	2200      	movs	r2, #0
 80033a2:	623b      	str	r3, [r7, #32]
 80033a4:	627a      	str	r2, [r7, #36]	; 0x24
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033ac:	2100      	movs	r1, #0
 80033ae:	4b47      	ldr	r3, [pc, #284]	; (80034cc <HAL_RCC_GetSysClockFreq+0x188>)
 80033b0:	fb03 f201 	mul.w	r2, r3, r1
 80033b4:	2300      	movs	r3, #0
 80033b6:	fb00 f303 	mul.w	r3, r0, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	4a43      	ldr	r2, [pc, #268]	; (80034cc <HAL_RCC_GetSysClockFreq+0x188>)
 80033be:	fba0 1202 	umull	r1, r2, r0, r2
 80033c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033c4:	460a      	mov	r2, r1
 80033c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80033c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ca:	4413      	add	r3, r2
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d0:	2200      	movs	r2, #0
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	61fa      	str	r2, [r7, #28]
 80033d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033de:	f7fc feff 	bl	80001e0 <__aeabi_uldivmod>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4613      	mov	r3, r2
 80033e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ea:	e053      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ec:	4b35      	ldr	r3, [pc, #212]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	2200      	movs	r2, #0
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	617a      	str	r2, [r7, #20]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033fe:	f04f 0b00 	mov.w	fp, #0
 8003402:	4652      	mov	r2, sl
 8003404:	465b      	mov	r3, fp
 8003406:	f04f 0000 	mov.w	r0, #0
 800340a:	f04f 0100 	mov.w	r1, #0
 800340e:	0159      	lsls	r1, r3, #5
 8003410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003414:	0150      	lsls	r0, r2, #5
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	ebb2 080a 	subs.w	r8, r2, sl
 800341e:	eb63 090b 	sbc.w	r9, r3, fp
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800342e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003432:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003436:	ebb2 0408 	subs.w	r4, r2, r8
 800343a:	eb63 0509 	sbc.w	r5, r3, r9
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	00eb      	lsls	r3, r5, #3
 8003448:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800344c:	00e2      	lsls	r2, r4, #3
 800344e:	4614      	mov	r4, r2
 8003450:	461d      	mov	r5, r3
 8003452:	eb14 030a 	adds.w	r3, r4, sl
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	eb45 030b 	adc.w	r3, r5, fp
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	e9d7 4500 	ldrd	r4, r5, [r7]
 800346a:	4629      	mov	r1, r5
 800346c:	028b      	lsls	r3, r1, #10
 800346e:	4621      	mov	r1, r4
 8003470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003474:	4621      	mov	r1, r4
 8003476:	028a      	lsls	r2, r1, #10
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347e:	2200      	movs	r2, #0
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	60fa      	str	r2, [r7, #12]
 8003484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003488:	f7fc feaa 	bl	80001e0 <__aeabi_uldivmod>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4613      	mov	r3, r2
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	3301      	adds	r3, #1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80034a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034ae:	e002      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80034b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3740      	adds	r7, #64	; 0x40
 80034bc:	46bd      	mov	sp, r7
 80034be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800
 80034c8:	00f42400 	.word	0x00f42400
 80034cc:	017d7840 	.word	0x017d7840

080034d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e07b      	b.n	80035da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d108      	bne.n	80034fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034f2:	d009      	beq.n	8003508 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	61da      	str	r2, [r3, #28]
 80034fa:	e005      	b.n	8003508 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fd fe88 	bl	8001238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800353e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	ea42 0103 	orr.w	r1, r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003594:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	f003 0104 	and.w	r1, r3, #4
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	f003 0210 	and.w	r2, r3, #16
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b088      	sub	sp, #32
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	4613      	mov	r3, r2
 80035f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_SPI_Transmit+0x22>
 8003600:	2302      	movs	r3, #2
 8003602:	e126      	b.n	8003852 <HAL_SPI_Transmit+0x270>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800360c:	f7fd ff36 	bl	800147c <HAL_GetTick>
 8003610:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	d002      	beq.n	8003628 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003622:	2302      	movs	r3, #2
 8003624:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003626:	e10b      	b.n	8003840 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_SPI_Transmit+0x52>
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003638:	e102      	b.n	8003840 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2203      	movs	r2, #3
 800363e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	88fa      	ldrh	r2, [r7, #6]
 8003652:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	88fa      	ldrh	r2, [r7, #6]
 8003658:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003680:	d10f      	bne.n	80036a2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003690:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d007      	beq.n	80036c0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c8:	d14b      	bne.n	8003762 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_SPI_Transmit+0xf6>
 80036d2:	8afb      	ldrh	r3, [r7, #22]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d13e      	bne.n	8003756 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	881a      	ldrh	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	1c9a      	adds	r2, r3, #2
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036fc:	e02b      	b.n	8003756 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b02      	cmp	r3, #2
 800370a:	d112      	bne.n	8003732 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	881a      	ldrh	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	1c9a      	adds	r2, r3, #2
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003730:	e011      	b.n	8003756 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003732:	f7fd fea3 	bl	800147c <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d803      	bhi.n	800374a <HAL_SPI_Transmit+0x168>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d102      	bne.n	8003750 <HAL_SPI_Transmit+0x16e>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003754:	e074      	b.n	8003840 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1ce      	bne.n	80036fe <HAL_SPI_Transmit+0x11c>
 8003760:	e04c      	b.n	80037fc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <HAL_SPI_Transmit+0x18e>
 800376a:	8afb      	ldrh	r3, [r7, #22]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d140      	bne.n	80037f2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	7812      	ldrb	r2, [r2, #0]
 800377c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003796:	e02c      	b.n	80037f2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d113      	bne.n	80037ce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	330c      	adds	r3, #12
 80037b0:	7812      	ldrb	r2, [r2, #0]
 80037b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80037cc:	e011      	b.n	80037f2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037ce:	f7fd fe55 	bl	800147c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d803      	bhi.n	80037e6 <HAL_SPI_Transmit+0x204>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e4:	d102      	bne.n	80037ec <HAL_SPI_Transmit+0x20a>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d102      	bne.n	80037f2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037f0:	e026      	b.n	8003840 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1cd      	bne.n	8003798 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	6839      	ldr	r1, [r7, #0]
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fbd9 	bl	8003fb8 <SPI_EndRxTxTransaction>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800381a:	2300      	movs	r3, #0
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	77fb      	strb	r3, [r7, #31]
 800383c:	e000      	b.n	8003840 <HAL_SPI_Transmit+0x25e>
  }

error:
 800383e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003850:	7ffb      	ldrb	r3, [r7, #31]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b088      	sub	sp, #32
 800385e:	af02      	add	r7, sp, #8
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003876:	d112      	bne.n	800389e <HAL_SPI_Receive+0x44>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10e      	bne.n	800389e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2204      	movs	r2, #4
 8003884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003888:	88fa      	ldrh	r2, [r7, #6]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	68b9      	ldr	r1, [r7, #8]
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f8f1 	bl	8003a7c <HAL_SPI_TransmitReceive>
 800389a:	4603      	mov	r3, r0
 800389c:	e0ea      	b.n	8003a74 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_SPI_Receive+0x52>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e0e3      	b.n	8003a74 <HAL_SPI_Receive+0x21a>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038b4:	f7fd fde2 	bl	800147c <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d002      	beq.n	80038cc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80038c6:	2302      	movs	r3, #2
 80038c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038ca:	e0ca      	b.n	8003a62 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <HAL_SPI_Receive+0x7e>
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d102      	bne.n	80038de <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038dc:	e0c1      	b.n	8003a62 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2204      	movs	r2, #4
 80038e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	88fa      	ldrh	r2, [r7, #6]
 80038f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	88fa      	ldrh	r2, [r7, #6]
 80038fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003924:	d10f      	bne.n	8003946 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003934:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003944:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d007      	beq.n	8003964 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003962:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d162      	bne.n	8003a32 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800396c:	e02e      	b.n	80039cc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b01      	cmp	r3, #1
 800397a:	d115      	bne.n	80039a8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f103 020c 	add.w	r2, r3, #12
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	7812      	ldrb	r2, [r2, #0]
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039a6:	e011      	b.n	80039cc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039a8:	f7fd fd68 	bl	800147c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d803      	bhi.n	80039c0 <HAL_SPI_Receive+0x166>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039be:	d102      	bne.n	80039c6 <HAL_SPI_Receive+0x16c>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d102      	bne.n	80039cc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039ca:	e04a      	b.n	8003a62 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1cb      	bne.n	800396e <HAL_SPI_Receive+0x114>
 80039d6:	e031      	b.n	8003a3c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d113      	bne.n	8003a0e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	b292      	uxth	r2, r2
 80039f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	1c9a      	adds	r2, r3, #2
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a0c:	e011      	b.n	8003a32 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a0e:	f7fd fd35 	bl	800147c <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d803      	bhi.n	8003a26 <HAL_SPI_Receive+0x1cc>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d102      	bne.n	8003a2c <HAL_SPI_Receive+0x1d2>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d102      	bne.n	8003a32 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a30:	e017      	b.n	8003a62 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1cd      	bne.n	80039d8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	6839      	ldr	r1, [r7, #0]
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 fa53 	bl	8003eec <SPI_EndRxTransaction>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	75fb      	strb	r3, [r7, #23]
 8003a5e:	e000      	b.n	8003a62 <HAL_SPI_Receive+0x208>
  }

error :
 8003a60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08c      	sub	sp, #48	; 0x30
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_SPI_TransmitReceive+0x26>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e18a      	b.n	8003db8 <HAL_SPI_TransmitReceive+0x33c>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003aaa:	f7fd fce7 	bl	800147c <HAL_GetTick>
 8003aae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ac0:	887b      	ldrh	r3, [r7, #2]
 8003ac2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d00f      	beq.n	8003aec <HAL_SPI_TransmitReceive+0x70>
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad2:	d107      	bne.n	8003ae4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d103      	bne.n	8003ae4 <HAL_SPI_TransmitReceive+0x68>
 8003adc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d003      	beq.n	8003aec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003aea:	e15b      	b.n	8003da4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_SPI_TransmitReceive+0x82>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_SPI_TransmitReceive+0x82>
 8003af8:	887b      	ldrh	r3, [r7, #2]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d103      	bne.n	8003b06 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b04:	e14e      	b.n	8003da4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d003      	beq.n	8003b1a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2205      	movs	r2, #5
 8003b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	887a      	ldrh	r2, [r7, #2]
 8003b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	887a      	ldrh	r2, [r7, #2]
 8003b3c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	887a      	ldrh	r2, [r7, #2]
 8003b42:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5a:	2b40      	cmp	r3, #64	; 0x40
 8003b5c:	d007      	beq.n	8003b6e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b76:	d178      	bne.n	8003c6a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_SPI_TransmitReceive+0x10a>
 8003b80:	8b7b      	ldrh	r3, [r7, #26]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d166      	bne.n	8003c54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	881a      	ldrh	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	1c9a      	adds	r2, r3, #2
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003baa:	e053      	b.n	8003c54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d11b      	bne.n	8003bf2 <HAL_SPI_TransmitReceive+0x176>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d016      	beq.n	8003bf2 <HAL_SPI_TransmitReceive+0x176>
 8003bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d113      	bne.n	8003bf2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	881a      	ldrh	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	1c9a      	adds	r2, r3, #2
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d119      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x1b8>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d014      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	b292      	uxth	r2, r2
 8003c16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	1c9a      	adds	r2, r3, #2
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c30:	2301      	movs	r3, #1
 8003c32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c34:	f7fd fc22 	bl	800147c <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d807      	bhi.n	8003c54 <HAL_SPI_TransmitReceive+0x1d8>
 8003c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4a:	d003      	beq.n	8003c54 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c52:	e0a7      	b.n	8003da4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1a6      	bne.n	8003bac <HAL_SPI_TransmitReceive+0x130>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1a1      	bne.n	8003bac <HAL_SPI_TransmitReceive+0x130>
 8003c68:	e07c      	b.n	8003d64 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_SPI_TransmitReceive+0x1fc>
 8003c72:	8b7b      	ldrh	r3, [r7, #26]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d16b      	bne.n	8003d50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	330c      	adds	r3, #12
 8003c82:	7812      	ldrb	r2, [r2, #0]
 8003c84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c9e:	e057      	b.n	8003d50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d11c      	bne.n	8003ce8 <HAL_SPI_TransmitReceive+0x26c>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d017      	beq.n	8003ce8 <HAL_SPI_TransmitReceive+0x26c>
 8003cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d114      	bne.n	8003ce8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	330c      	adds	r3, #12
 8003cc8:	7812      	ldrb	r2, [r2, #0]
 8003cca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d119      	bne.n	8003d2a <HAL_SPI_TransmitReceive+0x2ae>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d014      	beq.n	8003d2a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d26:	2301      	movs	r3, #1
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d2a:	f7fd fba7 	bl	800147c <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d803      	bhi.n	8003d42 <HAL_SPI_TransmitReceive+0x2c6>
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d102      	bne.n	8003d48 <HAL_SPI_TransmitReceive+0x2cc>
 8003d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d103      	bne.n	8003d50 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d4e:	e029      	b.n	8003da4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1a2      	bne.n	8003ca0 <HAL_SPI_TransmitReceive+0x224>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d19d      	bne.n	8003ca0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f925 	bl	8003fb8 <SPI_EndRxTxTransaction>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d006      	beq.n	8003d82 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d80:	e010      	b.n	8003da4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10b      	bne.n	8003da2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	e000      	b.n	8003da4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003da2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003db4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3730      	adds	r7, #48	; 0x30
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dce:	b2db      	uxtb	r3, r3
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	4613      	mov	r3, r2
 8003dea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dec:	f7fd fb46 	bl	800147c <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	4413      	add	r3, r2
 8003dfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dfc:	f7fd fb3e 	bl	800147c <HAL_GetTick>
 8003e00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e02:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	015b      	lsls	r3, r3, #5
 8003e08:	0d1b      	lsrs	r3, r3, #20
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	fb02 f303 	mul.w	r3, r2, r3
 8003e10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e12:	e054      	b.n	8003ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d050      	beq.n	8003ebe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e1c:	f7fd fb2e 	bl	800147c <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d902      	bls.n	8003e32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d13d      	bne.n	8003eae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e4a:	d111      	bne.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e54:	d004      	beq.n	8003e60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5e:	d107      	bne.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e78:	d10f      	bne.n	8003e9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e017      	b.n	8003ede <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	bf0c      	ite	eq
 8003ece:	2301      	moveq	r3, #1
 8003ed0:	2300      	movne	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d19b      	bne.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000080 	.word	0x20000080

08003eec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f00:	d111      	bne.n	8003f26 <SPI_EndRxTransaction+0x3a>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f0a:	d004      	beq.n	8003f16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f14:	d107      	bne.n	8003f26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f2e:	d12a      	bne.n	8003f86 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f38:	d012      	beq.n	8003f60 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2200      	movs	r2, #0
 8003f42:	2180      	movs	r1, #128	; 0x80
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f7ff ff49 	bl	8003ddc <SPI_WaitFlagStateUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d02d      	beq.n	8003fac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f54:	f043 0220 	orr.w	r2, r3, #32
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e026      	b.n	8003fae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2200      	movs	r2, #0
 8003f68:	2101      	movs	r1, #1
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f7ff ff36 	bl	8003ddc <SPI_WaitFlagStateUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01a      	beq.n	8003fac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7a:	f043 0220 	orr.w	r2, r3, #32
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e013      	b.n	8003fae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2101      	movs	r1, #1
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7ff ff23 	bl	8003ddc <SPI_WaitFlagStateUntilTimeout>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d007      	beq.n	8003fac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa0:	f043 0220 	orr.w	r2, r3, #32
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e000      	b.n	8003fae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fc4:	4b1b      	ldr	r3, [pc, #108]	; (8004034 <SPI_EndRxTxTransaction+0x7c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1b      	ldr	r2, [pc, #108]	; (8004038 <SPI_EndRxTxTransaction+0x80>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	0d5b      	lsrs	r3, r3, #21
 8003fd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fd4:	fb02 f303 	mul.w	r3, r2, r3
 8003fd8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe2:	d112      	bne.n	800400a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2200      	movs	r2, #0
 8003fec:	2180      	movs	r1, #128	; 0x80
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f7ff fef4 	bl	8003ddc <SPI_WaitFlagStateUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d016      	beq.n	8004028 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffe:	f043 0220 	orr.w	r2, r3, #32
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e00f      	b.n	800402a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	3b01      	subs	r3, #1
 8004014:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004020:	2b80      	cmp	r3, #128	; 0x80
 8004022:	d0f2      	beq.n	800400a <SPI_EndRxTxTransaction+0x52>
 8004024:	e000      	b.n	8004028 <SPI_EndRxTxTransaction+0x70>
        break;
 8004026:	bf00      	nop
  }

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000080 	.word	0x20000080
 8004038:	165e9f81 	.word	0x165e9f81

0800403c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800404a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800404e:	2b84      	cmp	r3, #132	; 0x84
 8004050:	d005      	beq.n	800405e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004052:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4413      	add	r3, r2
 800405a:	3303      	adds	r3, #3
 800405c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800405e:	68fb      	ldr	r3, [r7, #12]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004070:	f000 faf6 	bl	8004660 <vTaskStartScheduler>
  
  return osOK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	bd80      	pop	{r7, pc}

0800407a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800407a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800407c:	b089      	sub	sp, #36	; 0x24
 800407e:	af04      	add	r7, sp, #16
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d020      	beq.n	80040ce <osThreadCreate+0x54>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01c      	beq.n	80040ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685c      	ldr	r4, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681d      	ldr	r5, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691e      	ldr	r6, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff ffc8 	bl	800403c <makeFreeRtosPriority>
 80040ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040b6:	9202      	str	r2, [sp, #8]
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	9100      	str	r1, [sp, #0]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4632      	mov	r2, r6
 80040c0:	4629      	mov	r1, r5
 80040c2:	4620      	mov	r0, r4
 80040c4:	f000 f8ed 	bl	80042a2 <xTaskCreateStatic>
 80040c8:	4603      	mov	r3, r0
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	e01c      	b.n	8004108 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685c      	ldr	r4, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040da:	b29e      	uxth	r6, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff ffaa 	bl	800403c <makeFreeRtosPriority>
 80040e8:	4602      	mov	r2, r0
 80040ea:	f107 030c 	add.w	r3, r7, #12
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	9200      	str	r2, [sp, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	4632      	mov	r2, r6
 80040f6:	4629      	mov	r1, r5
 80040f8:	4620      	mov	r0, r4
 80040fa:	f000 f92f 	bl	800435c <xTaskCreate>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b01      	cmp	r3, #1
 8004102:	d001      	beq.n	8004108 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004104:	2300      	movs	r3, #0
 8004106:	e000      	b.n	800410a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004108:	68fb      	ldr	r3, [r7, #12]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004112 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <osDelay+0x16>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	e000      	b.n	800412a <osDelay+0x18>
 8004128:	2301      	movs	r3, #1
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fa64 	bl	80045f8 <vTaskDelay>
  
  return osOK;
 8004130:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f103 0208 	add.w	r2, r3, #8
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f04f 32ff 	mov.w	r2, #4294967295
 8004152:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f103 0208 	add.w	r2, r3, #8
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f103 0208 	add.w	r2, r3, #8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	601a      	str	r2, [r3, #0]
}
 80041d0:	bf00      	nop
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f2:	d103      	bne.n	80041fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e00c      	b.n	8004216 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3308      	adds	r3, #8
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	e002      	b.n	800420a <vListInsert+0x2e>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	429a      	cmp	r2, r3
 8004214:	d2f6      	bcs.n	8004204 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	601a      	str	r2, [r3, #0]
}
 8004242:	bf00      	nop
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6892      	ldr	r2, [r2, #8]
 8004264:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6852      	ldr	r2, [r2, #4]
 800426e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	429a      	cmp	r2, r3
 8004278:	d103      	bne.n	8004282 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	1e5a      	subs	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b08e      	sub	sp, #56	; 0x38
 80042a6:	af04      	add	r7, sp, #16
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042c8:	bf00      	nop
 80042ca:	e7fe      	b.n	80042ca <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10a      	bne.n	80042e8 <xTaskCreateStatic+0x46>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	61fb      	str	r3, [r7, #28]
}
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042e8:	23b4      	movs	r3, #180	; 0xb4
 80042ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2bb4      	cmp	r3, #180	; 0xb4
 80042f0:	d00a      	beq.n	8004308 <xTaskCreateStatic+0x66>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	61bb      	str	r3, [r7, #24]
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004308:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800430a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01e      	beq.n	800434e <xTaskCreateStatic+0xac>
 8004310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004312:	2b00      	cmp	r3, #0
 8004314:	d01b      	beq.n	800434e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800431e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	2202      	movs	r2, #2
 8004324:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004328:	2300      	movs	r3, #0
 800432a:	9303      	str	r3, [sp, #12]
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	9302      	str	r3, [sp, #8]
 8004330:	f107 0314 	add.w	r3, r7, #20
 8004334:	9301      	str	r3, [sp, #4]
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	68b9      	ldr	r1, [r7, #8]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f851 	bl	80043e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004346:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004348:	f000 f8ec 	bl	8004524 <prvAddNewTaskToReadyList>
 800434c:	e001      	b.n	8004352 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004352:	697b      	ldr	r3, [r7, #20]
	}
 8004354:	4618      	mov	r0, r3
 8004356:	3728      	adds	r7, #40	; 0x28
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08c      	sub	sp, #48	; 0x30
 8004360:	af04      	add	r7, sp, #16
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	4613      	mov	r3, r2
 800436a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4618      	mov	r0, r3
 8004372:	f000 ff11 	bl	8005198 <pvPortMalloc>
 8004376:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00e      	beq.n	800439c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800437e:	20b4      	movs	r0, #180	; 0xb4
 8004380:	f000 ff0a 	bl	8005198 <pvPortMalloc>
 8004384:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
 8004392:	e005      	b.n	80043a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004394:	6978      	ldr	r0, [r7, #20]
 8004396:	f000 ffcb 	bl	8005330 <vPortFree>
 800439a:	e001      	b.n	80043a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800439c:	2300      	movs	r3, #0
 800439e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d017      	beq.n	80043d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043ae:	88fa      	ldrh	r2, [r7, #6]
 80043b0:	2300      	movs	r3, #0
 80043b2:	9303      	str	r3, [sp, #12]
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	9302      	str	r3, [sp, #8]
 80043b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f80f 	bl	80043e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043ca:	69f8      	ldr	r0, [r7, #28]
 80043cc:	f000 f8aa 	bl	8004524 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043d0:	2301      	movs	r3, #1
 80043d2:	61bb      	str	r3, [r7, #24]
 80043d4:	e002      	b.n	80043dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043d6:	f04f 33ff 	mov.w	r3, #4294967295
 80043da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043dc:	69bb      	ldr	r3, [r7, #24]
	}
 80043de:	4618      	mov	r0, r3
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004400:	3b01      	subs	r3, #1
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	f023 0307 	bic.w	r3, r3, #7
 800440e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <prvInitialiseNewTask+0x48>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	617b      	str	r3, [r7, #20]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01f      	beq.n	8004476 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
 800443a:	e012      	b.n	8004462 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	7819      	ldrb	r1, [r3, #0]
 8004444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	4413      	add	r3, r2
 800444a:	3334      	adds	r3, #52	; 0x34
 800444c:	460a      	mov	r2, r1
 800444e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d006      	beq.n	800446a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	3301      	adds	r3, #1
 8004460:	61fb      	str	r3, [r7, #28]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	2b0f      	cmp	r3, #15
 8004466:	d9e9      	bls.n	800443c <prvInitialiseNewTask+0x54>
 8004468:	e000      	b.n	800446c <prvInitialiseNewTask+0x84>
			{
				break;
 800446a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004474:	e003      	b.n	800447e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004480:	2b06      	cmp	r3, #6
 8004482:	d901      	bls.n	8004488 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004484:	2306      	movs	r3, #6
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800448c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	2200      	movs	r2, #0
 8004498:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	3304      	adds	r3, #4
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff fe6b 	bl	800417a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	3318      	adds	r3, #24
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fe66 	bl	800417a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	f1c3 0207 	rsb	r2, r3, #7
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	334c      	adds	r3, #76	; 0x4c
 80044d8:	2260      	movs	r2, #96	; 0x60
 80044da:	2100      	movs	r1, #0
 80044dc:	4618      	mov	r0, r3
 80044de:	f001 f86b 	bl	80055b8 <memset>
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	4a0c      	ldr	r2, [pc, #48]	; (8004518 <prvInitialiseNewTask+0x130>)
 80044e6:	651a      	str	r2, [r3, #80]	; 0x50
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	4a0c      	ldr	r2, [pc, #48]	; (800451c <prvInitialiseNewTask+0x134>)
 80044ec:	655a      	str	r2, [r3, #84]	; 0x54
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	4a0b      	ldr	r2, [pc, #44]	; (8004520 <prvInitialiseNewTask+0x138>)
 80044f2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	68f9      	ldr	r1, [r7, #12]
 80044f8:	69b8      	ldr	r0, [r7, #24]
 80044fa:	f000 fc3d 	bl	8004d78 <pxPortInitialiseStack>
 80044fe:	4602      	mov	r2, r0
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800450a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800450e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004510:	bf00      	nop
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	08005804 	.word	0x08005804
 800451c:	08005824 	.word	0x08005824
 8004520:	080057e4 	.word	0x080057e4

08004524 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800452c:	f000 fd52 	bl	8004fd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004530:	4b2a      	ldr	r3, [pc, #168]	; (80045dc <prvAddNewTaskToReadyList+0xb8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3301      	adds	r3, #1
 8004536:	4a29      	ldr	r2, [pc, #164]	; (80045dc <prvAddNewTaskToReadyList+0xb8>)
 8004538:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800453a:	4b29      	ldr	r3, [pc, #164]	; (80045e0 <prvAddNewTaskToReadyList+0xbc>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d109      	bne.n	8004556 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004542:	4a27      	ldr	r2, [pc, #156]	; (80045e0 <prvAddNewTaskToReadyList+0xbc>)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004548:	4b24      	ldr	r3, [pc, #144]	; (80045dc <prvAddNewTaskToReadyList+0xb8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d110      	bne.n	8004572 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004550:	f000 facc 	bl	8004aec <prvInitialiseTaskLists>
 8004554:	e00d      	b.n	8004572 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004556:	4b23      	ldr	r3, [pc, #140]	; (80045e4 <prvAddNewTaskToReadyList+0xc0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800455e:	4b20      	ldr	r3, [pc, #128]	; (80045e0 <prvAddNewTaskToReadyList+0xbc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	429a      	cmp	r2, r3
 800456a:	d802      	bhi.n	8004572 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800456c:	4a1c      	ldr	r2, [pc, #112]	; (80045e0 <prvAddNewTaskToReadyList+0xbc>)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004572:	4b1d      	ldr	r3, [pc, #116]	; (80045e8 <prvAddNewTaskToReadyList+0xc4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3301      	adds	r3, #1
 8004578:	4a1b      	ldr	r2, [pc, #108]	; (80045e8 <prvAddNewTaskToReadyList+0xc4>)
 800457a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	2201      	movs	r2, #1
 8004582:	409a      	lsls	r2, r3
 8004584:	4b19      	ldr	r3, [pc, #100]	; (80045ec <prvAddNewTaskToReadyList+0xc8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4313      	orrs	r3, r2
 800458a:	4a18      	ldr	r2, [pc, #96]	; (80045ec <prvAddNewTaskToReadyList+0xc8>)
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <prvAddNewTaskToReadyList+0xcc>)
 800459c:	441a      	add	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3304      	adds	r3, #4
 80045a2:	4619      	mov	r1, r3
 80045a4:	4610      	mov	r0, r2
 80045a6:	f7ff fdf5 	bl	8004194 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045aa:	f000 fd43 	bl	8005034 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045ae:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <prvAddNewTaskToReadyList+0xc0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00e      	beq.n	80045d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045b6:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <prvAddNewTaskToReadyList+0xbc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d207      	bcs.n	80045d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <prvAddNewTaskToReadyList+0xd0>)
 80045c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045d4:	bf00      	nop
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	200005fc 	.word	0x200005fc
 80045e0:	200004fc 	.word	0x200004fc
 80045e4:	20000608 	.word	0x20000608
 80045e8:	20000618 	.word	0x20000618
 80045ec:	20000604 	.word	0x20000604
 80045f0:	20000500 	.word	0x20000500
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d017      	beq.n	800463a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800460a:	4b13      	ldr	r3, [pc, #76]	; (8004658 <vTaskDelay+0x60>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <vTaskDelay+0x30>
	__asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	60bb      	str	r3, [r7, #8]
}
 8004624:	bf00      	nop
 8004626:	e7fe      	b.n	8004626 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004628:	f000 f884 	bl	8004734 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800462c:	2100      	movs	r1, #0
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fb3c 	bl	8004cac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004634:	f000 f88c 	bl	8004750 <xTaskResumeAll>
 8004638:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d107      	bne.n	8004650 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <vTaskDelay+0x64>)
 8004642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000624 	.word	0x20000624
 800465c:	e000ed04 	.word	0xe000ed04

08004660 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	; 0x28
 8004664:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800466a:	2300      	movs	r3, #0
 800466c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800466e:	463a      	mov	r2, r7
 8004670:	1d39      	adds	r1, r7, #4
 8004672:	f107 0308 	add.w	r3, r7, #8
 8004676:	4618      	mov	r0, r3
 8004678:	f7fb ff34 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800467c:	6839      	ldr	r1, [r7, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	9202      	str	r2, [sp, #8]
 8004684:	9301      	str	r3, [sp, #4]
 8004686:	2300      	movs	r3, #0
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	2300      	movs	r3, #0
 800468c:	460a      	mov	r2, r1
 800468e:	4921      	ldr	r1, [pc, #132]	; (8004714 <vTaskStartScheduler+0xb4>)
 8004690:	4821      	ldr	r0, [pc, #132]	; (8004718 <vTaskStartScheduler+0xb8>)
 8004692:	f7ff fe06 	bl	80042a2 <xTaskCreateStatic>
 8004696:	4603      	mov	r3, r0
 8004698:	4a20      	ldr	r2, [pc, #128]	; (800471c <vTaskStartScheduler+0xbc>)
 800469a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800469c:	4b1f      	ldr	r3, [pc, #124]	; (800471c <vTaskStartScheduler+0xbc>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046a4:	2301      	movs	r3, #1
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	e001      	b.n	80046ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d11b      	bne.n	80046ec <vTaskStartScheduler+0x8c>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	613b      	str	r3, [r7, #16]
}
 80046c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046c8:	4b15      	ldr	r3, [pc, #84]	; (8004720 <vTaskStartScheduler+0xc0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	334c      	adds	r3, #76	; 0x4c
 80046ce:	4a15      	ldr	r2, [pc, #84]	; (8004724 <vTaskStartScheduler+0xc4>)
 80046d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046d2:	4b15      	ldr	r3, [pc, #84]	; (8004728 <vTaskStartScheduler+0xc8>)
 80046d4:	f04f 32ff 	mov.w	r2, #4294967295
 80046d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046da:	4b14      	ldr	r3, [pc, #80]	; (800472c <vTaskStartScheduler+0xcc>)
 80046dc:	2201      	movs	r2, #1
 80046de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046e0:	4b13      	ldr	r3, [pc, #76]	; (8004730 <vTaskStartScheduler+0xd0>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046e6:	f000 fbd3 	bl	8004e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046ea:	e00e      	b.n	800470a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d10a      	bne.n	800470a <vTaskStartScheduler+0xaa>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	60fb      	str	r3, [r7, #12]
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <vTaskStartScheduler+0xa8>
}
 800470a:	bf00      	nop
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	080057c4 	.word	0x080057c4
 8004718:	08004abd 	.word	0x08004abd
 800471c:	20000620 	.word	0x20000620
 8004720:	200004fc 	.word	0x200004fc
 8004724:	20000090 	.word	0x20000090
 8004728:	2000061c 	.word	0x2000061c
 800472c:	20000608 	.word	0x20000608
 8004730:	20000600 	.word	0x20000600

08004734 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <vTaskSuspendAll+0x18>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3301      	adds	r3, #1
 800473e:	4a03      	ldr	r2, [pc, #12]	; (800474c <vTaskSuspendAll+0x18>)
 8004740:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004742:	bf00      	nop
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	20000624 	.word	0x20000624

08004750 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800475e:	4b41      	ldr	r3, [pc, #260]	; (8004864 <xTaskResumeAll+0x114>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10a      	bne.n	800477c <xTaskResumeAll+0x2c>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	603b      	str	r3, [r7, #0]
}
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800477c:	f000 fc2a 	bl	8004fd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004780:	4b38      	ldr	r3, [pc, #224]	; (8004864 <xTaskResumeAll+0x114>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3b01      	subs	r3, #1
 8004786:	4a37      	ldr	r2, [pc, #220]	; (8004864 <xTaskResumeAll+0x114>)
 8004788:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800478a:	4b36      	ldr	r3, [pc, #216]	; (8004864 <xTaskResumeAll+0x114>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d161      	bne.n	8004856 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004792:	4b35      	ldr	r3, [pc, #212]	; (8004868 <xTaskResumeAll+0x118>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d05d      	beq.n	8004856 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800479a:	e02e      	b.n	80047fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800479c:	4b33      	ldr	r3, [pc, #204]	; (800486c <xTaskResumeAll+0x11c>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3318      	adds	r3, #24
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fd50 	bl	800424e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fd4b 	bl	800424e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	2201      	movs	r2, #1
 80047be:	409a      	lsls	r2, r3
 80047c0:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <xTaskResumeAll+0x120>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	4a2a      	ldr	r2, [pc, #168]	; (8004870 <xTaskResumeAll+0x120>)
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4a27      	ldr	r2, [pc, #156]	; (8004874 <xTaskResumeAll+0x124>)
 80047d8:	441a      	add	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3304      	adds	r3, #4
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f7ff fcd7 	bl	8004194 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ea:	4b23      	ldr	r3, [pc, #140]	; (8004878 <xTaskResumeAll+0x128>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d302      	bcc.n	80047fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80047f4:	4b21      	ldr	r3, [pc, #132]	; (800487c <xTaskResumeAll+0x12c>)
 80047f6:	2201      	movs	r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047fa:	4b1c      	ldr	r3, [pc, #112]	; (800486c <xTaskResumeAll+0x11c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1cc      	bne.n	800479c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004808:	f000 fa12 	bl	8004c30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800480c:	4b1c      	ldr	r3, [pc, #112]	; (8004880 <xTaskResumeAll+0x130>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d010      	beq.n	800483a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004818:	f000 f836 	bl	8004888 <xTaskIncrementTick>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004822:	4b16      	ldr	r3, [pc, #88]	; (800487c <xTaskResumeAll+0x12c>)
 8004824:	2201      	movs	r2, #1
 8004826:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3b01      	subs	r3, #1
 800482c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f1      	bne.n	8004818 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004834:	4b12      	ldr	r3, [pc, #72]	; (8004880 <xTaskResumeAll+0x130>)
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800483a:	4b10      	ldr	r3, [pc, #64]	; (800487c <xTaskResumeAll+0x12c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d009      	beq.n	8004856 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004842:	2301      	movs	r3, #1
 8004844:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004846:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <xTaskResumeAll+0x134>)
 8004848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004856:	f000 fbed 	bl	8005034 <vPortExitCritical>

	return xAlreadyYielded;
 800485a:	68bb      	ldr	r3, [r7, #8]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	20000624 	.word	0x20000624
 8004868:	200005fc 	.word	0x200005fc
 800486c:	200005bc 	.word	0x200005bc
 8004870:	20000604 	.word	0x20000604
 8004874:	20000500 	.word	0x20000500
 8004878:	200004fc 	.word	0x200004fc
 800487c:	20000610 	.word	0x20000610
 8004880:	2000060c 	.word	0x2000060c
 8004884:	e000ed04 	.word	0xe000ed04

08004888 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004892:	4b4e      	ldr	r3, [pc, #312]	; (80049cc <xTaskIncrementTick+0x144>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	f040 808e 	bne.w	80049b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800489c:	4b4c      	ldr	r3, [pc, #304]	; (80049d0 <xTaskIncrementTick+0x148>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3301      	adds	r3, #1
 80048a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048a4:	4a4a      	ldr	r2, [pc, #296]	; (80049d0 <xTaskIncrementTick+0x148>)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d120      	bne.n	80048f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80048b0:	4b48      	ldr	r3, [pc, #288]	; (80049d4 <xTaskIncrementTick+0x14c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	603b      	str	r3, [r7, #0]
}
 80048cc:	bf00      	nop
 80048ce:	e7fe      	b.n	80048ce <xTaskIncrementTick+0x46>
 80048d0:	4b40      	ldr	r3, [pc, #256]	; (80049d4 <xTaskIncrementTick+0x14c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	4b40      	ldr	r3, [pc, #256]	; (80049d8 <xTaskIncrementTick+0x150>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a3e      	ldr	r2, [pc, #248]	; (80049d4 <xTaskIncrementTick+0x14c>)
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	4a3e      	ldr	r2, [pc, #248]	; (80049d8 <xTaskIncrementTick+0x150>)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	4b3d      	ldr	r3, [pc, #244]	; (80049dc <xTaskIncrementTick+0x154>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3301      	adds	r3, #1
 80048ea:	4a3c      	ldr	r2, [pc, #240]	; (80049dc <xTaskIncrementTick+0x154>)
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	f000 f99f 	bl	8004c30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048f2:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <xTaskIncrementTick+0x158>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d348      	bcc.n	800498e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048fc:	4b35      	ldr	r3, [pc, #212]	; (80049d4 <xTaskIncrementTick+0x14c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d104      	bne.n	8004910 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004906:	4b36      	ldr	r3, [pc, #216]	; (80049e0 <xTaskIncrementTick+0x158>)
 8004908:	f04f 32ff 	mov.w	r2, #4294967295
 800490c:	601a      	str	r2, [r3, #0]
					break;
 800490e:	e03e      	b.n	800498e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004910:	4b30      	ldr	r3, [pc, #192]	; (80049d4 <xTaskIncrementTick+0x14c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	429a      	cmp	r2, r3
 8004926:	d203      	bcs.n	8004930 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004928:	4a2d      	ldr	r2, [pc, #180]	; (80049e0 <xTaskIncrementTick+0x158>)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800492e:	e02e      	b.n	800498e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	3304      	adds	r3, #4
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fc8a 	bl	800424e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	2b00      	cmp	r3, #0
 8004940:	d004      	beq.n	800494c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	3318      	adds	r3, #24
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fc81 	bl	800424e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	2201      	movs	r2, #1
 8004952:	409a      	lsls	r2, r3
 8004954:	4b23      	ldr	r3, [pc, #140]	; (80049e4 <xTaskIncrementTick+0x15c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4313      	orrs	r3, r2
 800495a:	4a22      	ldr	r2, [pc, #136]	; (80049e4 <xTaskIncrementTick+0x15c>)
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4a1f      	ldr	r2, [pc, #124]	; (80049e8 <xTaskIncrementTick+0x160>)
 800496c:	441a      	add	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	3304      	adds	r3, #4
 8004972:	4619      	mov	r1, r3
 8004974:	4610      	mov	r0, r2
 8004976:	f7ff fc0d 	bl	8004194 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497e:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <xTaskIncrementTick+0x164>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	429a      	cmp	r2, r3
 8004986:	d3b9      	bcc.n	80048fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004988:	2301      	movs	r3, #1
 800498a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800498c:	e7b6      	b.n	80048fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800498e:	4b17      	ldr	r3, [pc, #92]	; (80049ec <xTaskIncrementTick+0x164>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004994:	4914      	ldr	r1, [pc, #80]	; (80049e8 <xTaskIncrementTick+0x160>)
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d901      	bls.n	80049aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80049a6:	2301      	movs	r3, #1
 80049a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049aa:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <xTaskIncrementTick+0x168>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d007      	beq.n	80049c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80049b2:	2301      	movs	r3, #1
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	e004      	b.n	80049c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049b8:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <xTaskIncrementTick+0x16c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3301      	adds	r3, #1
 80049be:	4a0d      	ldr	r2, [pc, #52]	; (80049f4 <xTaskIncrementTick+0x16c>)
 80049c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049c2:	697b      	ldr	r3, [r7, #20]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	20000624 	.word	0x20000624
 80049d0:	20000600 	.word	0x20000600
 80049d4:	200005b4 	.word	0x200005b4
 80049d8:	200005b8 	.word	0x200005b8
 80049dc:	20000614 	.word	0x20000614
 80049e0:	2000061c 	.word	0x2000061c
 80049e4:	20000604 	.word	0x20000604
 80049e8:	20000500 	.word	0x20000500
 80049ec:	200004fc 	.word	0x200004fc
 80049f0:	20000610 	.word	0x20000610
 80049f4:	2000060c 	.word	0x2000060c

080049f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049fe:	4b29      	ldr	r3, [pc, #164]	; (8004aa4 <vTaskSwitchContext+0xac>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a06:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <vTaskSwitchContext+0xb0>)
 8004a08:	2201      	movs	r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a0c:	e044      	b.n	8004a98 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004a0e:	4b26      	ldr	r3, [pc, #152]	; (8004aa8 <vTaskSwitchContext+0xb0>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a14:	4b25      	ldr	r3, [pc, #148]	; (8004aac <vTaskSwitchContext+0xb4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	fab3 f383 	clz	r3, r3
 8004a20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a22:	7afb      	ldrb	r3, [r7, #11]
 8004a24:	f1c3 031f 	rsb	r3, r3, #31
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	4921      	ldr	r1, [pc, #132]	; (8004ab0 <vTaskSwitchContext+0xb8>)
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10a      	bne.n	8004a54 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	607b      	str	r3, [r7, #4]
}
 8004a50:	bf00      	nop
 8004a52:	e7fe      	b.n	8004a52 <vTaskSwitchContext+0x5a>
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4a14      	ldr	r2, [pc, #80]	; (8004ab0 <vTaskSwitchContext+0xb8>)
 8004a60:	4413      	add	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	3308      	adds	r3, #8
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d104      	bne.n	8004a84 <vTaskSwitchContext+0x8c>
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	605a      	str	r2, [r3, #4]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	4a0a      	ldr	r2, [pc, #40]	; (8004ab4 <vTaskSwitchContext+0xbc>)
 8004a8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a8e:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <vTaskSwitchContext+0xbc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	334c      	adds	r3, #76	; 0x4c
 8004a94:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <vTaskSwitchContext+0xc0>)
 8004a96:	6013      	str	r3, [r2, #0]
}
 8004a98:	bf00      	nop
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	20000624 	.word	0x20000624
 8004aa8:	20000610 	.word	0x20000610
 8004aac:	20000604 	.word	0x20000604
 8004ab0:	20000500 	.word	0x20000500
 8004ab4:	200004fc 	.word	0x200004fc
 8004ab8:	20000090 	.word	0x20000090

08004abc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ac4:	f000 f852 	bl	8004b6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ac8:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <prvIdleTask+0x28>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d9f9      	bls.n	8004ac4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <prvIdleTask+0x2c>)
 8004ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ae0:	e7f0      	b.n	8004ac4 <prvIdleTask+0x8>
 8004ae2:	bf00      	nop
 8004ae4:	20000500 	.word	0x20000500
 8004ae8:	e000ed04 	.word	0xe000ed04

08004aec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004af2:	2300      	movs	r3, #0
 8004af4:	607b      	str	r3, [r7, #4]
 8004af6:	e00c      	b.n	8004b12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4a12      	ldr	r2, [pc, #72]	; (8004b4c <prvInitialiseTaskLists+0x60>)
 8004b04:	4413      	add	r3, r2
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff fb17 	bl	800413a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	607b      	str	r3, [r7, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b06      	cmp	r3, #6
 8004b16:	d9ef      	bls.n	8004af8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b18:	480d      	ldr	r0, [pc, #52]	; (8004b50 <prvInitialiseTaskLists+0x64>)
 8004b1a:	f7ff fb0e 	bl	800413a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b1e:	480d      	ldr	r0, [pc, #52]	; (8004b54 <prvInitialiseTaskLists+0x68>)
 8004b20:	f7ff fb0b 	bl	800413a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b24:	480c      	ldr	r0, [pc, #48]	; (8004b58 <prvInitialiseTaskLists+0x6c>)
 8004b26:	f7ff fb08 	bl	800413a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b2a:	480c      	ldr	r0, [pc, #48]	; (8004b5c <prvInitialiseTaskLists+0x70>)
 8004b2c:	f7ff fb05 	bl	800413a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b30:	480b      	ldr	r0, [pc, #44]	; (8004b60 <prvInitialiseTaskLists+0x74>)
 8004b32:	f7ff fb02 	bl	800413a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b36:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <prvInitialiseTaskLists+0x78>)
 8004b38:	4a05      	ldr	r2, [pc, #20]	; (8004b50 <prvInitialiseTaskLists+0x64>)
 8004b3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <prvInitialiseTaskLists+0x7c>)
 8004b3e:	4a05      	ldr	r2, [pc, #20]	; (8004b54 <prvInitialiseTaskLists+0x68>)
 8004b40:	601a      	str	r2, [r3, #0]
}
 8004b42:	bf00      	nop
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20000500 	.word	0x20000500
 8004b50:	2000058c 	.word	0x2000058c
 8004b54:	200005a0 	.word	0x200005a0
 8004b58:	200005bc 	.word	0x200005bc
 8004b5c:	200005d0 	.word	0x200005d0
 8004b60:	200005e8 	.word	0x200005e8
 8004b64:	200005b4 	.word	0x200005b4
 8004b68:	200005b8 	.word	0x200005b8

08004b6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b72:	e019      	b.n	8004ba8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b74:	f000 fa2e 	bl	8004fd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b78:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <prvCheckTasksWaitingTermination+0x50>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3304      	adds	r3, #4
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff fb62 	bl	800424e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <prvCheckTasksWaitingTermination+0x54>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	4a0b      	ldr	r2, [pc, #44]	; (8004bc0 <prvCheckTasksWaitingTermination+0x54>)
 8004b92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b94:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <prvCheckTasksWaitingTermination+0x58>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	4a0a      	ldr	r2, [pc, #40]	; (8004bc4 <prvCheckTasksWaitingTermination+0x58>)
 8004b9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b9e:	f000 fa49 	bl	8005034 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f810 	bl	8004bc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <prvCheckTasksWaitingTermination+0x58>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e1      	bne.n	8004b74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	200005d0 	.word	0x200005d0
 8004bc0:	200005fc 	.word	0x200005fc
 8004bc4:	200005e4 	.word	0x200005e4

08004bc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	334c      	adds	r3, #76	; 0x4c
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fd05 	bl	80055e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d108      	bne.n	8004bf6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fba1 	bl	8005330 <vPortFree>
				vPortFree( pxTCB );
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fb9e 	bl	8005330 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bf4:	e018      	b.n	8004c28 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d103      	bne.n	8004c08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fb95 	bl	8005330 <vPortFree>
	}
 8004c06:	e00f      	b.n	8004c28 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d00a      	beq.n	8004c28 <prvDeleteTCB+0x60>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	60fb      	str	r3, [r7, #12]
}
 8004c24:	bf00      	nop
 8004c26:	e7fe      	b.n	8004c26 <prvDeleteTCB+0x5e>
	}
 8004c28:	bf00      	nop
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c36:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <prvResetNextTaskUnblockTime+0x38>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d104      	bne.n	8004c4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <prvResetNextTaskUnblockTime+0x3c>)
 8004c42:	f04f 32ff 	mov.w	r2, #4294967295
 8004c46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c48:	e008      	b.n	8004c5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c4a:	4b07      	ldr	r3, [pc, #28]	; (8004c68 <prvResetNextTaskUnblockTime+0x38>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4a04      	ldr	r2, [pc, #16]	; (8004c6c <prvResetNextTaskUnblockTime+0x3c>)
 8004c5a:	6013      	str	r3, [r2, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	200005b4 	.word	0x200005b4
 8004c6c:	2000061c 	.word	0x2000061c

08004c70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c76:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <xTaskGetSchedulerState+0x34>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d102      	bne.n	8004c84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	607b      	str	r3, [r7, #4]
 8004c82:	e008      	b.n	8004c96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c84:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <xTaskGetSchedulerState+0x38>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d102      	bne.n	8004c92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	e001      	b.n	8004c96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c92:	2300      	movs	r3, #0
 8004c94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c96:	687b      	ldr	r3, [r7, #4]
	}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	20000608 	.word	0x20000608
 8004ca8:	20000624 	.word	0x20000624

08004cac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cb6:	4b29      	ldr	r3, [pc, #164]	; (8004d5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cbc:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fac3 	bl	800424e <uxListRemove>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10b      	bne.n	8004ce6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004cce:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43da      	mvns	r2, r3
 8004cdc:	4b21      	ldr	r3, [pc, #132]	; (8004d64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	4a20      	ldr	r2, [pc, #128]	; (8004d64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ce4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d10a      	bne.n	8004d04 <prvAddCurrentTaskToDelayedList+0x58>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d007      	beq.n	8004d04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cf4:	4b1a      	ldr	r3, [pc, #104]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	481a      	ldr	r0, [pc, #104]	; (8004d68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004cfe:	f7ff fa49 	bl	8004194 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d02:	e026      	b.n	8004d52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d0c:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d209      	bcs.n	8004d30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d1c:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4b0f      	ldr	r3, [pc, #60]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3304      	adds	r3, #4
 8004d26:	4619      	mov	r1, r3
 8004d28:	4610      	mov	r0, r2
 8004d2a:	f7ff fa57 	bl	80041dc <vListInsert>
}
 8004d2e:	e010      	b.n	8004d52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d30:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f7ff fa4d 	bl	80041dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d42:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d202      	bcs.n	8004d52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d4c:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	6013      	str	r3, [r2, #0]
}
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000600 	.word	0x20000600
 8004d60:	200004fc 	.word	0x200004fc
 8004d64:	20000604 	.word	0x20000604
 8004d68:	200005e8 	.word	0x200005e8
 8004d6c:	200005b8 	.word	0x200005b8
 8004d70:	200005b4 	.word	0x200005b4
 8004d74:	2000061c 	.word	0x2000061c

08004d78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3b04      	subs	r3, #4
 8004d88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3b04      	subs	r3, #4
 8004d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f023 0201 	bic.w	r2, r3, #1
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3b04      	subs	r3, #4
 8004da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004da8:	4a0c      	ldr	r2, [pc, #48]	; (8004ddc <pxPortInitialiseStack+0x64>)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3b14      	subs	r3, #20
 8004db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	3b04      	subs	r3, #4
 8004dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f06f 0202 	mvn.w	r2, #2
 8004dc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3b20      	subs	r3, #32
 8004dcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004dce:	68fb      	ldr	r3, [r7, #12]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	08004de1 	.word	0x08004de1

08004de0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004dea:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <prvTaskExitError+0x54>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df2:	d00a      	beq.n	8004e0a <prvTaskExitError+0x2a>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	60fb      	str	r3, [r7, #12]
}
 8004e06:	bf00      	nop
 8004e08:	e7fe      	b.n	8004e08 <prvTaskExitError+0x28>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	60bb      	str	r3, [r7, #8]
}
 8004e1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e1e:	bf00      	nop
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0fc      	beq.n	8004e20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e26:	bf00      	nop
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	2000008c 	.word	0x2000008c
	...

08004e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e40:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <pxCurrentTCBConst2>)
 8004e42:	6819      	ldr	r1, [r3, #0]
 8004e44:	6808      	ldr	r0, [r1, #0]
 8004e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4a:	f380 8809 	msr	PSP, r0
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f04f 0000 	mov.w	r0, #0
 8004e56:	f380 8811 	msr	BASEPRI, r0
 8004e5a:	4770      	bx	lr
 8004e5c:	f3af 8000 	nop.w

08004e60 <pxCurrentTCBConst2>:
 8004e60:	200004fc 	.word	0x200004fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop

08004e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e68:	4808      	ldr	r0, [pc, #32]	; (8004e8c <prvPortStartFirstTask+0x24>)
 8004e6a:	6800      	ldr	r0, [r0, #0]
 8004e6c:	6800      	ldr	r0, [r0, #0]
 8004e6e:	f380 8808 	msr	MSP, r0
 8004e72:	f04f 0000 	mov.w	r0, #0
 8004e76:	f380 8814 	msr	CONTROL, r0
 8004e7a:	b662      	cpsie	i
 8004e7c:	b661      	cpsie	f
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	df00      	svc	0
 8004e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e8a:	bf00      	nop
 8004e8c:	e000ed08 	.word	0xe000ed08

08004e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e96:	4b46      	ldr	r3, [pc, #280]	; (8004fb0 <xPortStartScheduler+0x120>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a46      	ldr	r2, [pc, #280]	; (8004fb4 <xPortStartScheduler+0x124>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d10a      	bne.n	8004eb6 <xPortStartScheduler+0x26>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	613b      	str	r3, [r7, #16]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004eb6:	4b3e      	ldr	r3, [pc, #248]	; (8004fb0 <xPortStartScheduler+0x120>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a3f      	ldr	r2, [pc, #252]	; (8004fb8 <xPortStartScheduler+0x128>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d10a      	bne.n	8004ed6 <xPortStartScheduler+0x46>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	60fb      	str	r3, [r7, #12]
}
 8004ed2:	bf00      	nop
 8004ed4:	e7fe      	b.n	8004ed4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ed6:	4b39      	ldr	r3, [pc, #228]	; (8004fbc <xPortStartScheduler+0x12c>)
 8004ed8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	22ff      	movs	r2, #255	; 0xff
 8004ee6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	4b31      	ldr	r3, [pc, #196]	; (8004fc0 <xPortStartScheduler+0x130>)
 8004efc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004efe:	4b31      	ldr	r3, [pc, #196]	; (8004fc4 <xPortStartScheduler+0x134>)
 8004f00:	2207      	movs	r2, #7
 8004f02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f04:	e009      	b.n	8004f1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004f06:	4b2f      	ldr	r3, [pc, #188]	; (8004fc4 <xPortStartScheduler+0x134>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	4a2d      	ldr	r2, [pc, #180]	; (8004fc4 <xPortStartScheduler+0x134>)
 8004f0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f22:	2b80      	cmp	r3, #128	; 0x80
 8004f24:	d0ef      	beq.n	8004f06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f26:	4b27      	ldr	r3, [pc, #156]	; (8004fc4 <xPortStartScheduler+0x134>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f1c3 0307 	rsb	r3, r3, #7
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d00a      	beq.n	8004f48 <xPortStartScheduler+0xb8>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	60bb      	str	r3, [r7, #8]
}
 8004f44:	bf00      	nop
 8004f46:	e7fe      	b.n	8004f46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f48:	4b1e      	ldr	r3, [pc, #120]	; (8004fc4 <xPortStartScheduler+0x134>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	021b      	lsls	r3, r3, #8
 8004f4e:	4a1d      	ldr	r2, [pc, #116]	; (8004fc4 <xPortStartScheduler+0x134>)
 8004f50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f52:	4b1c      	ldr	r3, [pc, #112]	; (8004fc4 <xPortStartScheduler+0x134>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f5a:	4a1a      	ldr	r2, [pc, #104]	; (8004fc4 <xPortStartScheduler+0x134>)
 8004f5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f66:	4b18      	ldr	r3, [pc, #96]	; (8004fc8 <xPortStartScheduler+0x138>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a17      	ldr	r2, [pc, #92]	; (8004fc8 <xPortStartScheduler+0x138>)
 8004f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f72:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <xPortStartScheduler+0x138>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a14      	ldr	r2, [pc, #80]	; (8004fc8 <xPortStartScheduler+0x138>)
 8004f78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f7e:	f000 f8dd 	bl	800513c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f82:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <xPortStartScheduler+0x13c>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f88:	f000 f8fc 	bl	8005184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f8c:	4b10      	ldr	r3, [pc, #64]	; (8004fd0 <xPortStartScheduler+0x140>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a0f      	ldr	r2, [pc, #60]	; (8004fd0 <xPortStartScheduler+0x140>)
 8004f92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f98:	f7ff ff66 	bl	8004e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f9c:	f7ff fd2c 	bl	80049f8 <vTaskSwitchContext>
	prvTaskExitError();
 8004fa0:	f7ff ff1e 	bl	8004de0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	e000ed00 	.word	0xe000ed00
 8004fb4:	410fc271 	.word	0x410fc271
 8004fb8:	410fc270 	.word	0x410fc270
 8004fbc:	e000e400 	.word	0xe000e400
 8004fc0:	20000628 	.word	0x20000628
 8004fc4:	2000062c 	.word	0x2000062c
 8004fc8:	e000ed20 	.word	0xe000ed20
 8004fcc:	2000008c 	.word	0x2000008c
 8004fd0:	e000ef34 	.word	0xe000ef34

08004fd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	607b      	str	r3, [r7, #4]
}
 8004fec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fee:	4b0f      	ldr	r3, [pc, #60]	; (800502c <vPortEnterCritical+0x58>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	4a0d      	ldr	r2, [pc, #52]	; (800502c <vPortEnterCritical+0x58>)
 8004ff6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	; (800502c <vPortEnterCritical+0x58>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d10f      	bne.n	8005020 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005000:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <vPortEnterCritical+0x5c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <vPortEnterCritical+0x4c>
	__asm volatile
 800500a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	603b      	str	r3, [r7, #0]
}
 800501c:	bf00      	nop
 800501e:	e7fe      	b.n	800501e <vPortEnterCritical+0x4a>
	}
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	2000008c 	.word	0x2000008c
 8005030:	e000ed04 	.word	0xe000ed04

08005034 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800503a:	4b12      	ldr	r3, [pc, #72]	; (8005084 <vPortExitCritical+0x50>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10a      	bne.n	8005058 <vPortExitCritical+0x24>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	607b      	str	r3, [r7, #4]
}
 8005054:	bf00      	nop
 8005056:	e7fe      	b.n	8005056 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <vPortExitCritical+0x50>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3b01      	subs	r3, #1
 800505e:	4a09      	ldr	r2, [pc, #36]	; (8005084 <vPortExitCritical+0x50>)
 8005060:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005062:	4b08      	ldr	r3, [pc, #32]	; (8005084 <vPortExitCritical+0x50>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d105      	bne.n	8005076 <vPortExitCritical+0x42>
 800506a:	2300      	movs	r3, #0
 800506c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005074:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	2000008c 	.word	0x2000008c
	...

08005090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005090:	f3ef 8009 	mrs	r0, PSP
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <pxCurrentTCBConst>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	f01e 0f10 	tst.w	lr, #16
 80050a0:	bf08      	it	eq
 80050a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050aa:	6010      	str	r0, [r2, #0]
 80050ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80050b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80050b4:	f380 8811 	msr	BASEPRI, r0
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f7ff fc9a 	bl	80049f8 <vTaskSwitchContext>
 80050c4:	f04f 0000 	mov.w	r0, #0
 80050c8:	f380 8811 	msr	BASEPRI, r0
 80050cc:	bc09      	pop	{r0, r3}
 80050ce:	6819      	ldr	r1, [r3, #0]
 80050d0:	6808      	ldr	r0, [r1, #0]
 80050d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d6:	f01e 0f10 	tst.w	lr, #16
 80050da:	bf08      	it	eq
 80050dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80050e0:	f380 8809 	msr	PSP, r0
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	f3af 8000 	nop.w

080050f0 <pxCurrentTCBConst>:
 80050f0:	200004fc 	.word	0x200004fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop

080050f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	607b      	str	r3, [r7, #4]
}
 8005110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005112:	f7ff fbb9 	bl	8004888 <xTaskIncrementTick>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800511c:	4b06      	ldr	r3, [pc, #24]	; (8005138 <xPortSysTickHandler+0x40>)
 800511e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	2300      	movs	r3, #0
 8005126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	f383 8811 	msr	BASEPRI, r3
}
 800512e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	e000ed04 	.word	0xe000ed04

0800513c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <vPortSetupTimerInterrupt+0x34>)
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005146:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <vPortSetupTimerInterrupt+0x38>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800514c:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <vPortSetupTimerInterrupt+0x3c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a0a      	ldr	r2, [pc, #40]	; (800517c <vPortSetupTimerInterrupt+0x40>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	099b      	lsrs	r3, r3, #6
 8005158:	4a09      	ldr	r2, [pc, #36]	; (8005180 <vPortSetupTimerInterrupt+0x44>)
 800515a:	3b01      	subs	r3, #1
 800515c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800515e:	4b04      	ldr	r3, [pc, #16]	; (8005170 <vPortSetupTimerInterrupt+0x34>)
 8005160:	2207      	movs	r2, #7
 8005162:	601a      	str	r2, [r3, #0]
}
 8005164:	bf00      	nop
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	e000e010 	.word	0xe000e010
 8005174:	e000e018 	.word	0xe000e018
 8005178:	20000080 	.word	0x20000080
 800517c:	10624dd3 	.word	0x10624dd3
 8005180:	e000e014 	.word	0xe000e014

08005184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005184:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005194 <vPortEnableVFP+0x10>
 8005188:	6801      	ldr	r1, [r0, #0]
 800518a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800518e:	6001      	str	r1, [r0, #0]
 8005190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005192:	bf00      	nop
 8005194:	e000ed88 	.word	0xe000ed88

08005198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	; 0x28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051a0:	2300      	movs	r3, #0
 80051a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051a4:	f7ff fac6 	bl	8004734 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051a8:	4b5b      	ldr	r3, [pc, #364]	; (8005318 <pvPortMalloc+0x180>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051b0:	f000 f920 	bl	80053f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051b4:	4b59      	ldr	r3, [pc, #356]	; (800531c <pvPortMalloc+0x184>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f040 8093 	bne.w	80052e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01d      	beq.n	8005204 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80051c8:	2208      	movs	r2, #8
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4413      	add	r3, r2
 80051ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d014      	beq.n	8005204 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f023 0307 	bic.w	r3, r3, #7
 80051e0:	3308      	adds	r3, #8
 80051e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <pvPortMalloc+0x6c>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	617b      	str	r3, [r7, #20]
}
 8005200:	bf00      	nop
 8005202:	e7fe      	b.n	8005202 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d06e      	beq.n	80052e8 <pvPortMalloc+0x150>
 800520a:	4b45      	ldr	r3, [pc, #276]	; (8005320 <pvPortMalloc+0x188>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	429a      	cmp	r2, r3
 8005212:	d869      	bhi.n	80052e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005214:	4b43      	ldr	r3, [pc, #268]	; (8005324 <pvPortMalloc+0x18c>)
 8005216:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005218:	4b42      	ldr	r3, [pc, #264]	; (8005324 <pvPortMalloc+0x18c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800521e:	e004      	b.n	800522a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	429a      	cmp	r2, r3
 8005232:	d903      	bls.n	800523c <pvPortMalloc+0xa4>
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f1      	bne.n	8005220 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800523c:	4b36      	ldr	r3, [pc, #216]	; (8005318 <pvPortMalloc+0x180>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005242:	429a      	cmp	r2, r3
 8005244:	d050      	beq.n	80052e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2208      	movs	r2, #8
 800524c:	4413      	add	r3, r2
 800524e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	1ad2      	subs	r2, r2, r3
 8005260:	2308      	movs	r3, #8
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	429a      	cmp	r2, r3
 8005266:	d91f      	bls.n	80052a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4413      	add	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <pvPortMalloc+0xf8>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	613b      	str	r3, [r7, #16]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	1ad2      	subs	r2, r2, r3
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052a2:	69b8      	ldr	r0, [r7, #24]
 80052a4:	f000 f908 	bl	80054b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052a8:	4b1d      	ldr	r3, [pc, #116]	; (8005320 <pvPortMalloc+0x188>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	4a1b      	ldr	r2, [pc, #108]	; (8005320 <pvPortMalloc+0x188>)
 80052b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052b6:	4b1a      	ldr	r3, [pc, #104]	; (8005320 <pvPortMalloc+0x188>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b1b      	ldr	r3, [pc, #108]	; (8005328 <pvPortMalloc+0x190>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d203      	bcs.n	80052ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052c2:	4b17      	ldr	r3, [pc, #92]	; (8005320 <pvPortMalloc+0x188>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a18      	ldr	r2, [pc, #96]	; (8005328 <pvPortMalloc+0x190>)
 80052c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <pvPortMalloc+0x184>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052de:	4b13      	ldr	r3, [pc, #76]	; (800532c <pvPortMalloc+0x194>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3301      	adds	r3, #1
 80052e4:	4a11      	ldr	r2, [pc, #68]	; (800532c <pvPortMalloc+0x194>)
 80052e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052e8:	f7ff fa32 	bl	8004750 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <pvPortMalloc+0x174>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	60fb      	str	r3, [r7, #12]
}
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <pvPortMalloc+0x172>
	return pvReturn;
 800530c:	69fb      	ldr	r3, [r7, #28]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3728      	adds	r7, #40	; 0x28
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	20004238 	.word	0x20004238
 800531c:	2000424c 	.word	0x2000424c
 8005320:	2000423c 	.word	0x2000423c
 8005324:	20004230 	.word	0x20004230
 8005328:	20004240 	.word	0x20004240
 800532c:	20004244 	.word	0x20004244

08005330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d04d      	beq.n	80053de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005342:	2308      	movs	r3, #8
 8005344:	425b      	negs	r3, r3
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4413      	add	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	4b24      	ldr	r3, [pc, #144]	; (80053e8 <vPortFree+0xb8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4013      	ands	r3, r2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10a      	bne.n	8005374 <vPortFree+0x44>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	60fb      	str	r3, [r7, #12]
}
 8005370:	bf00      	nop
 8005372:	e7fe      	b.n	8005372 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <vPortFree+0x62>
	__asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	60bb      	str	r3, [r7, #8]
}
 800538e:	bf00      	nop
 8005390:	e7fe      	b.n	8005390 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <vPortFree+0xb8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4013      	ands	r3, r2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01e      	beq.n	80053de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d11a      	bne.n	80053de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	4b0e      	ldr	r3, [pc, #56]	; (80053e8 <vPortFree+0xb8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	401a      	ands	r2, r3
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053b8:	f7ff f9bc 	bl	8004734 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <vPortFree+0xbc>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4413      	add	r3, r2
 80053c6:	4a09      	ldr	r2, [pc, #36]	; (80053ec <vPortFree+0xbc>)
 80053c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053ca:	6938      	ldr	r0, [r7, #16]
 80053cc:	f000 f874 	bl	80054b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053d0:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <vPortFree+0xc0>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3301      	adds	r3, #1
 80053d6:	4a06      	ldr	r2, [pc, #24]	; (80053f0 <vPortFree+0xc0>)
 80053d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053da:	f7ff f9b9 	bl	8004750 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053de:	bf00      	nop
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	2000424c 	.word	0x2000424c
 80053ec:	2000423c 	.word	0x2000423c
 80053f0:	20004248 	.word	0x20004248

080053f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005400:	4b27      	ldr	r3, [pc, #156]	; (80054a0 <prvHeapInit+0xac>)
 8005402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00c      	beq.n	8005428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3307      	adds	r3, #7
 8005412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0307 	bic.w	r3, r3, #7
 800541a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	4a1f      	ldr	r2, [pc, #124]	; (80054a0 <prvHeapInit+0xac>)
 8005424:	4413      	add	r3, r2
 8005426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800542c:	4a1d      	ldr	r2, [pc, #116]	; (80054a4 <prvHeapInit+0xb0>)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005432:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <prvHeapInit+0xb0>)
 8005434:	2200      	movs	r2, #0
 8005436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	4413      	add	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005440:	2208      	movs	r2, #8
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0307 	bic.w	r3, r3, #7
 800544e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a15      	ldr	r2, [pc, #84]	; (80054a8 <prvHeapInit+0xb4>)
 8005454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005456:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <prvHeapInit+0xb4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2200      	movs	r2, #0
 800545c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800545e:	4b12      	ldr	r3, [pc, #72]	; (80054a8 <prvHeapInit+0xb4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	1ad2      	subs	r2, r2, r3
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005474:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <prvHeapInit+0xb4>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	4a0a      	ldr	r2, [pc, #40]	; (80054ac <prvHeapInit+0xb8>)
 8005482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	4a09      	ldr	r2, [pc, #36]	; (80054b0 <prvHeapInit+0xbc>)
 800548a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <prvHeapInit+0xc0>)
 800548e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005492:	601a      	str	r2, [r3, #0]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	20000630 	.word	0x20000630
 80054a4:	20004230 	.word	0x20004230
 80054a8:	20004238 	.word	0x20004238
 80054ac:	20004240 	.word	0x20004240
 80054b0:	2000423c 	.word	0x2000423c
 80054b4:	2000424c 	.word	0x2000424c

080054b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054c0:	4b28      	ldr	r3, [pc, #160]	; (8005564 <prvInsertBlockIntoFreeList+0xac>)
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	e002      	b.n	80054cc <prvInsertBlockIntoFreeList+0x14>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d8f7      	bhi.n	80054c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	4413      	add	r3, r2
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d108      	bne.n	80054fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	441a      	add	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	441a      	add	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d118      	bne.n	8005540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	4b15      	ldr	r3, [pc, #84]	; (8005568 <prvInsertBlockIntoFreeList+0xb0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d00d      	beq.n	8005536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	441a      	add	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e008      	b.n	8005548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005536:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <prvInsertBlockIntoFreeList+0xb0>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	e003      	b.n	8005548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	429a      	cmp	r2, r3
 800554e:	d002      	beq.n	8005556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005556:	bf00      	nop
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20004230 	.word	0x20004230
 8005568:	20004238 	.word	0x20004238

0800556c <__libc_init_array>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	4d0d      	ldr	r5, [pc, #52]	; (80055a4 <__libc_init_array+0x38>)
 8005570:	4c0d      	ldr	r4, [pc, #52]	; (80055a8 <__libc_init_array+0x3c>)
 8005572:	1b64      	subs	r4, r4, r5
 8005574:	10a4      	asrs	r4, r4, #2
 8005576:	2600      	movs	r6, #0
 8005578:	42a6      	cmp	r6, r4
 800557a:	d109      	bne.n	8005590 <__libc_init_array+0x24>
 800557c:	4d0b      	ldr	r5, [pc, #44]	; (80055ac <__libc_init_array+0x40>)
 800557e:	4c0c      	ldr	r4, [pc, #48]	; (80055b0 <__libc_init_array+0x44>)
 8005580:	f000 f8e4 	bl	800574c <_init>
 8005584:	1b64      	subs	r4, r4, r5
 8005586:	10a4      	asrs	r4, r4, #2
 8005588:	2600      	movs	r6, #0
 800558a:	42a6      	cmp	r6, r4
 800558c:	d105      	bne.n	800559a <__libc_init_array+0x2e>
 800558e:	bd70      	pop	{r4, r5, r6, pc}
 8005590:	f855 3b04 	ldr.w	r3, [r5], #4
 8005594:	4798      	blx	r3
 8005596:	3601      	adds	r6, #1
 8005598:	e7ee      	b.n	8005578 <__libc_init_array+0xc>
 800559a:	f855 3b04 	ldr.w	r3, [r5], #4
 800559e:	4798      	blx	r3
 80055a0:	3601      	adds	r6, #1
 80055a2:	e7f2      	b.n	800558a <__libc_init_array+0x1e>
 80055a4:	0800584c 	.word	0x0800584c
 80055a8:	0800584c 	.word	0x0800584c
 80055ac:	0800584c 	.word	0x0800584c
 80055b0:	08005850 	.word	0x08005850

080055b4 <__retarget_lock_acquire_recursive>:
 80055b4:	4770      	bx	lr

080055b6 <__retarget_lock_release_recursive>:
 80055b6:	4770      	bx	lr

080055b8 <memset>:
 80055b8:	4402      	add	r2, r0
 80055ba:	4603      	mov	r3, r0
 80055bc:	4293      	cmp	r3, r2
 80055be:	d100      	bne.n	80055c2 <memset+0xa>
 80055c0:	4770      	bx	lr
 80055c2:	f803 1b01 	strb.w	r1, [r3], #1
 80055c6:	e7f9      	b.n	80055bc <memset+0x4>

080055c8 <cleanup_glue>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	460c      	mov	r4, r1
 80055cc:	6809      	ldr	r1, [r1, #0]
 80055ce:	4605      	mov	r5, r0
 80055d0:	b109      	cbz	r1, 80055d6 <cleanup_glue+0xe>
 80055d2:	f7ff fff9 	bl	80055c8 <cleanup_glue>
 80055d6:	4621      	mov	r1, r4
 80055d8:	4628      	mov	r0, r5
 80055da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055de:	f000 b869 	b.w	80056b4 <_free_r>
	...

080055e4 <_reclaim_reent>:
 80055e4:	4b2c      	ldr	r3, [pc, #176]	; (8005698 <_reclaim_reent+0xb4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4283      	cmp	r3, r0
 80055ea:	b570      	push	{r4, r5, r6, lr}
 80055ec:	4604      	mov	r4, r0
 80055ee:	d051      	beq.n	8005694 <_reclaim_reent+0xb0>
 80055f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80055f2:	b143      	cbz	r3, 8005606 <_reclaim_reent+0x22>
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d14a      	bne.n	8005690 <_reclaim_reent+0xac>
 80055fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055fc:	6819      	ldr	r1, [r3, #0]
 80055fe:	b111      	cbz	r1, 8005606 <_reclaim_reent+0x22>
 8005600:	4620      	mov	r0, r4
 8005602:	f000 f857 	bl	80056b4 <_free_r>
 8005606:	6961      	ldr	r1, [r4, #20]
 8005608:	b111      	cbz	r1, 8005610 <_reclaim_reent+0x2c>
 800560a:	4620      	mov	r0, r4
 800560c:	f000 f852 	bl	80056b4 <_free_r>
 8005610:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005612:	b111      	cbz	r1, 800561a <_reclaim_reent+0x36>
 8005614:	4620      	mov	r0, r4
 8005616:	f000 f84d 	bl	80056b4 <_free_r>
 800561a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800561c:	b111      	cbz	r1, 8005624 <_reclaim_reent+0x40>
 800561e:	4620      	mov	r0, r4
 8005620:	f000 f848 	bl	80056b4 <_free_r>
 8005624:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005626:	b111      	cbz	r1, 800562e <_reclaim_reent+0x4a>
 8005628:	4620      	mov	r0, r4
 800562a:	f000 f843 	bl	80056b4 <_free_r>
 800562e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005630:	b111      	cbz	r1, 8005638 <_reclaim_reent+0x54>
 8005632:	4620      	mov	r0, r4
 8005634:	f000 f83e 	bl	80056b4 <_free_r>
 8005638:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800563a:	b111      	cbz	r1, 8005642 <_reclaim_reent+0x5e>
 800563c:	4620      	mov	r0, r4
 800563e:	f000 f839 	bl	80056b4 <_free_r>
 8005642:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005644:	b111      	cbz	r1, 800564c <_reclaim_reent+0x68>
 8005646:	4620      	mov	r0, r4
 8005648:	f000 f834 	bl	80056b4 <_free_r>
 800564c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800564e:	b111      	cbz	r1, 8005656 <_reclaim_reent+0x72>
 8005650:	4620      	mov	r0, r4
 8005652:	f000 f82f 	bl	80056b4 <_free_r>
 8005656:	69a3      	ldr	r3, [r4, #24]
 8005658:	b1e3      	cbz	r3, 8005694 <_reclaim_reent+0xb0>
 800565a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800565c:	4620      	mov	r0, r4
 800565e:	4798      	blx	r3
 8005660:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005662:	b1b9      	cbz	r1, 8005694 <_reclaim_reent+0xb0>
 8005664:	4620      	mov	r0, r4
 8005666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800566a:	f7ff bfad 	b.w	80055c8 <cleanup_glue>
 800566e:	5949      	ldr	r1, [r1, r5]
 8005670:	b941      	cbnz	r1, 8005684 <_reclaim_reent+0xa0>
 8005672:	3504      	adds	r5, #4
 8005674:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005676:	2d80      	cmp	r5, #128	; 0x80
 8005678:	68d9      	ldr	r1, [r3, #12]
 800567a:	d1f8      	bne.n	800566e <_reclaim_reent+0x8a>
 800567c:	4620      	mov	r0, r4
 800567e:	f000 f819 	bl	80056b4 <_free_r>
 8005682:	e7ba      	b.n	80055fa <_reclaim_reent+0x16>
 8005684:	680e      	ldr	r6, [r1, #0]
 8005686:	4620      	mov	r0, r4
 8005688:	f000 f814 	bl	80056b4 <_free_r>
 800568c:	4631      	mov	r1, r6
 800568e:	e7ef      	b.n	8005670 <_reclaim_reent+0x8c>
 8005690:	2500      	movs	r5, #0
 8005692:	e7ef      	b.n	8005674 <_reclaim_reent+0x90>
 8005694:	bd70      	pop	{r4, r5, r6, pc}
 8005696:	bf00      	nop
 8005698:	20000090 	.word	0x20000090

0800569c <__malloc_lock>:
 800569c:	4801      	ldr	r0, [pc, #4]	; (80056a4 <__malloc_lock+0x8>)
 800569e:	f7ff bf89 	b.w	80055b4 <__retarget_lock_acquire_recursive>
 80056a2:	bf00      	nop
 80056a4:	20004250 	.word	0x20004250

080056a8 <__malloc_unlock>:
 80056a8:	4801      	ldr	r0, [pc, #4]	; (80056b0 <__malloc_unlock+0x8>)
 80056aa:	f7ff bf84 	b.w	80055b6 <__retarget_lock_release_recursive>
 80056ae:	bf00      	nop
 80056b0:	20004250 	.word	0x20004250

080056b4 <_free_r>:
 80056b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056b6:	2900      	cmp	r1, #0
 80056b8:	d044      	beq.n	8005744 <_free_r+0x90>
 80056ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056be:	9001      	str	r0, [sp, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f1a1 0404 	sub.w	r4, r1, #4
 80056c6:	bfb8      	it	lt
 80056c8:	18e4      	addlt	r4, r4, r3
 80056ca:	f7ff ffe7 	bl	800569c <__malloc_lock>
 80056ce:	4a1e      	ldr	r2, [pc, #120]	; (8005748 <_free_r+0x94>)
 80056d0:	9801      	ldr	r0, [sp, #4]
 80056d2:	6813      	ldr	r3, [r2, #0]
 80056d4:	b933      	cbnz	r3, 80056e4 <_free_r+0x30>
 80056d6:	6063      	str	r3, [r4, #4]
 80056d8:	6014      	str	r4, [r2, #0]
 80056da:	b003      	add	sp, #12
 80056dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056e0:	f7ff bfe2 	b.w	80056a8 <__malloc_unlock>
 80056e4:	42a3      	cmp	r3, r4
 80056e6:	d908      	bls.n	80056fa <_free_r+0x46>
 80056e8:	6825      	ldr	r5, [r4, #0]
 80056ea:	1961      	adds	r1, r4, r5
 80056ec:	428b      	cmp	r3, r1
 80056ee:	bf01      	itttt	eq
 80056f0:	6819      	ldreq	r1, [r3, #0]
 80056f2:	685b      	ldreq	r3, [r3, #4]
 80056f4:	1949      	addeq	r1, r1, r5
 80056f6:	6021      	streq	r1, [r4, #0]
 80056f8:	e7ed      	b.n	80056d6 <_free_r+0x22>
 80056fa:	461a      	mov	r2, r3
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	b10b      	cbz	r3, 8005704 <_free_r+0x50>
 8005700:	42a3      	cmp	r3, r4
 8005702:	d9fa      	bls.n	80056fa <_free_r+0x46>
 8005704:	6811      	ldr	r1, [r2, #0]
 8005706:	1855      	adds	r5, r2, r1
 8005708:	42a5      	cmp	r5, r4
 800570a:	d10b      	bne.n	8005724 <_free_r+0x70>
 800570c:	6824      	ldr	r4, [r4, #0]
 800570e:	4421      	add	r1, r4
 8005710:	1854      	adds	r4, r2, r1
 8005712:	42a3      	cmp	r3, r4
 8005714:	6011      	str	r1, [r2, #0]
 8005716:	d1e0      	bne.n	80056da <_free_r+0x26>
 8005718:	681c      	ldr	r4, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	6053      	str	r3, [r2, #4]
 800571e:	4421      	add	r1, r4
 8005720:	6011      	str	r1, [r2, #0]
 8005722:	e7da      	b.n	80056da <_free_r+0x26>
 8005724:	d902      	bls.n	800572c <_free_r+0x78>
 8005726:	230c      	movs	r3, #12
 8005728:	6003      	str	r3, [r0, #0]
 800572a:	e7d6      	b.n	80056da <_free_r+0x26>
 800572c:	6825      	ldr	r5, [r4, #0]
 800572e:	1961      	adds	r1, r4, r5
 8005730:	428b      	cmp	r3, r1
 8005732:	bf04      	itt	eq
 8005734:	6819      	ldreq	r1, [r3, #0]
 8005736:	685b      	ldreq	r3, [r3, #4]
 8005738:	6063      	str	r3, [r4, #4]
 800573a:	bf04      	itt	eq
 800573c:	1949      	addeq	r1, r1, r5
 800573e:	6021      	streq	r1, [r4, #0]
 8005740:	6054      	str	r4, [r2, #4]
 8005742:	e7ca      	b.n	80056da <_free_r+0x26>
 8005744:	b003      	add	sp, #12
 8005746:	bd30      	pop	{r4, r5, pc}
 8005748:	20004254 	.word	0x20004254

0800574c <_init>:
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574e:	bf00      	nop
 8005750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005752:	bc08      	pop	{r3}
 8005754:	469e      	mov	lr, r3
 8005756:	4770      	bx	lr

08005758 <_fini>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	bf00      	nop
 800575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575e:	bc08      	pop	{r3}
 8005760:	469e      	mov	lr, r3
 8005762:	4770      	bx	lr
